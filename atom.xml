<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikeneo&#39;s TechZone</title>
  <subtitle>Nikeneo的技术栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-30T10:44:38.253Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nikeneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS7下配置VNC曲折之路(续集)</title>
    <link href="http://yoursite.com/2016/05/30/CentOS7%E4%B8%8B%E9%85%8D%E7%BD%AEVNC%E6%9B%B2%E6%8A%98%E4%B9%8B%E8%B7%AF%EF%BC%88%E7%BB%AD%E9%9B%86%EF%BC%89/"/>
    <id>http://yoursite.com/2016/05/30/CentOS7下配置VNC曲折之路（续集）/</id>
    <published>2016-05-29T16:00:00.000Z</published>
    <updated>2016-05-30T10:44:38.253Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[CentOS|运维]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路（续集）&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;/a&gt;CentOS7下配置VNC曲折之路（续集）&lt;/h1&gt;&lt;p&gt;继续昨天的文，因为项目要使用的业务软件为oracle系列，这些商业软件安全性相对较好，其中一点就是只能使用低权限账号进行软件管理操作，在使用之前的教程配置好vnc后，我们只能启动root账户的vnc服务，添加其他的低权限账户的服务后启动时会报错，报错行和代码和昨天的一样，本来想着进了root账户后使用su - USER的方法来切换用户后安装相应的软件，结果使用此方法的话程序连安装检查都过不了，因为程序不能调用图形界面。然后我便试着注销root账户，但是在vnc下点击注销按钮后无任何反应，即使在登陆界面也无法点击按钮切换到其他的用户，试了几次过后只好作罢。&lt;br&gt;然后又开始了漫长的google之路，偶然间发现了一篇digitalocean里的一篇文章，链接如下&lt;br&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-remote-access-for-the-gnome-desktop-on-centos-7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-remote-access-for-the-gnome-desktop-on-centos-7&lt;/a&gt;&lt;br&gt;这篇文章介绍了CentOS7平台上的vnc服务搭建方法，较之前的文章个人感觉更为详细，对比它的操作步骤，关闭掉开启的vnc服务后，复制一份配置文件，端口号取3（之前的那个为2）切换到普通管理员账户下，运行vncserver，进行密码配置，重载systemd，启动服务，然后发现2号服务（root）无法启动，然后普通用户可以启动了，这个结果简直惊喜，马上联系甲方管理员添加端口，连接vnc服务，接下来的事都是顺水推舟了。&lt;br&gt;这个问题到底是什么原因还不清楚，但终究配置好了vnc服务，也顺利的安装好了业务软件，总算没有拖慢项目进度。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[CentOS|运维]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路（续集）&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路（续集）
    
    </summary>
    
      <category term="LINUX" scheme="http://yoursite.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7下配置VNC曲折之路</title>
    <link href="http://yoursite.com/2016/05/29/CentOS7%E4%B8%8B%E9%85%8D%E7%BD%AEVNC%E6%9B%B2%E6%8A%98%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2016/05/29/CentOS7下配置VNC曲折之路/</id>
    <published>2016-05-28T16:00:00.000Z</published>
    <updated>2016-05-29T12:17:52.783Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;/a&gt;CentOS7下配置VNC曲折之路&lt;/h1&gt;&lt;p&gt;最近项目第一期工程即将完工，准备部署到甲方的服务器上进行测试工作，部署的时候自然会牵涉到各类业务软件的部署，这个项目选择了weblogic和oracle数据库，由于平时配置此类业务软件均是使用图形界面下配置，对命令行下静默安装没有经验，恰逢甲方提供的是一个最小化安装的centos7服务器，所以接手的第一件事自然是装上x window system和vnc服务以方便远程配置。&lt;br&gt;接手后花了半分钟时间google了一下vnc服务的配置文档&lt;br&gt;&lt;a href=&quot;http://www.centoscn.com/image-text/install/2014/0829/3592.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.centoscn.com/image-text/install/2014/0829/3592.html&lt;/a&gt;&lt;br&gt;按照文档中的指示&lt;br&gt;yum check-update&lt;br&gt;yum install tigervnc-server tigervnc -y&lt;br&gt;CentOS7会自动搜索速度最快的软件源，自然一路顺风，不到一分钟就提示complete。&lt;br&gt;然后便是复制vnc配置文档到系统服务目录下（/etc/systemd/system），将配置文档更名为vncserver@:1.service。使用vi打开后，遵循文档中的帮助，将\&lt;user\&gt;修改为用vnc连接账户名，然后保存。&lt;br&gt;&lt;img src=&quot;/images/1464512594060.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/user\&gt;&lt;/p&gt;
&lt;p&gt;再重新加载一下systemd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使其能够随开机启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后启动服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就蒙蔽了。。&lt;br&gt;&lt;img src=&quot;/images/1464513611541.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;好吧。。然后看一下报错信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志显示&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# systemctl status vncserver@:1.service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?.vncserver@:1.service - Remote desktop service (VNC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; disabled; vendor preset: disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Active: failed (Result: &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;-code) since Sun 2016-05-29 17:20:00 CST; 4min 50s ago&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Process: 8164 ExecStart=/usr/sbin/runuser &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; root -c /usr/bin/vncserver %i (code=exited, status=1/FAILURE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Process: 8160 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || : (code=exited, status=0/SUCCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Main PID: 8104 (code=exited, status=1/FAILURE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:19:59 localhost.localdomain systemd[1]: Starting Remote desktop s...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: vncserver@:1.service: con...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: Failed to start Remote de...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: Unit vncserver@:1.service...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: vncserver@:1.service failed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hint: Some lines were ellipsized, use &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; to show &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; full.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这尼玛就尴尬了，反复试了几次后决定google一下，心里想着自己肯定不是个例。。&lt;/p&gt;
&lt;p&gt;然后找到一篇csdn上的文章（链接忘了），说是把配置文档里的type类型由forking改为simple，于是照着这样改了之后，重复以上操作，错误信息是没有了，然后使用netstat查看端口，但预想的端口并没有被打开&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# systemctl start vncserver@:1.service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# netstat -ntlp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Active Internet connections (only servers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      10258/rpcbind       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1669/sshd           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2378/master         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:50080           0.0.0.0:*               LISTEN      10256/rpc.statd     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::111                  :::*                    LISTEN      10258/rpcbind       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::22                   :::*                    LISTEN      1669/sshd           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 ::1:25                  :::*                    LISTEN      2378/master         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::43559                :::*                    LISTEN      10256/rpc.statd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后查看一下状态。。依旧faild&lt;br&gt;这尼玛，没用啊，怎么办。。感觉把type改为simple就是掩耳盗铃，没什么卵用啊，于是我又开始了google之旅，其中centoscn上有一篇文档说是把USER改为root，这样就不会报错，但是我试过之后启动服务同样fail，这样一来二去实验排查仍未解决问题，我开始慌了。开始试着将vnc套件卸载掉，然后重装相关软件，将上面的步骤重复后仍然启动服务时显示fail。&lt;br&gt;这尼玛就尴尬了，下周就要开始测试了，结果被卡在vnc这一关了，弄得我很是焦灼。&lt;br&gt;过了一天，再次登上ssh服务器，将vnc相关软件卸载掉，再在google上逛逛有没有其他的安装文档能够参考，接下来就找到了一下两篇&lt;br&gt;&lt;a href=&quot;https://www.centos.org/forums/viewtopic.php?t=47713&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.centos.org/forums/viewtopic.php?t=47713&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://linux.cn/article-5335-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://linux.cn/article-5335-1.html&lt;/a&gt;&lt;br&gt;第一篇文章指的是可以把tmp目录下的.X11文件夹清空，同时我自己也为了图个吉利，把服务号改为了2，即vncserver@:2.service&lt;br&gt;第二篇文章则是一片最小安装环境下的一篇vnc配置文档，首先先安装x window system，再安装gnome相关套件，最后重启服务器&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum check-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum groupinstall &lt;span class=&quot;string&quot;&gt;&quot;X Window System&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，也有可能是软件源所提供的软件本身有问题，所以我将软件源换成了我日常使用的163镜像源后，再将上述两种方法结合实施后，再次启动服务，系统卡顿了两秒，好兆头，说不定能成，启动完毕后系统也没报错，敲入命令查看一下当前状态，状态终于成为了喜人的active&lt;br&gt;&lt;img src=&quot;/images/1464517607539.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;使用netstat查看监听端口，vnc的服务正常监听，vnc配置终获成功。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;对比两次操作之间的差异，可能是由于图形界面没有正确的被安装，当然也有可能服务号1不能使用，前者是因为之前操作云服务器的习惯，服务提供商一般都是提供了vnc管理接口，而操作云服务器也一直使用的命令行，没有使用过在GUI下配置相关服务（大陆外服务器VNC连接图形界面能慢死人），另外，之前自动匹配的软件源也有可能提供了有问题的软件（猜测），当然，安装图形界面后没有重启服务器也可能是原因之一。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;/a&gt;CentOS
    
    </summary>
    
      <category term="LINUX" scheme="http://yoursite.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>RHCSA 笔记</title>
    <link href="http://yoursite.com/2016/05/25/RHCSA%20Note/"/>
    <id>http://yoursite.com/2016/05/25/RHCSA Note/</id>
    <published>2016-05-25T01:36:35.000Z</published>
    <updated>2016-05-29T11:23:33.837Z</updated>
    
    <content type="html">&lt;p&gt;@(我的第一个笔记本)[Linux, RHCSA]&lt;/p&gt;
&lt;h1 id=&quot;RHCSA-Note&quot;&gt;&lt;a href=&quot;#RHCSA-Note&quot; class=&quot;headerlink&quot; title=&quot;RHCSA Note&quot;&gt;&lt;/a&gt;RHCSA Note&lt;/h1&gt;&lt;h2 id=&quot;输入输出重定向&quot;&gt;&lt;a href=&quot;#输入输出重定向&quot; class=&quot;headerlink&quot; title=&quot;输入输出重定向&quot;&gt;&lt;/a&gt;输入输出重定向&lt;/h2&gt;&lt;p&gt;重定向操作符可以用来将命令输入和输出数据流从默认位置重定向到其他位置，其输入输出数据流的位置称为&lt;strong&gt;句柄&lt;/strong&gt;，常见的句柄有三种，每种句柄有句柄、句柄代号、句柄描述三种属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STDIN    0    键盘输入&lt;/li&gt;
&lt;li&gt;STDOUT 1    输出信息到提示符窗口&lt;/li&gt;
&lt;li&gt;STDERR 2     输出错误信息到提示符窗口&lt;br&gt;默认的&amp;lt;重定向符号的句柄代号是0，&amp;gt;符号的句柄代号是1，输入&amp;lt;或&amp;gt;符号后必须制定数据的读写位置，可以使一个文件，也可以是其他句柄。&lt;br&gt;要指定重定向到现有句柄，请使用与（&amp;amp;）字符。后面接要重定向的句柄号&lt;br&gt;例如，将句柄号2重定向到句柄号1    2&amp;gt;&amp;amp;1&lt;br&gt;Linux重定向符功能描述&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;将命令输出写入文件或设备中，而不是命令提示符或句柄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt; 从文件而不是从键盘或句柄读入数据输入&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将输出写入文件末尾而不覆盖文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;amp; 将一个句柄的输出写到另一个句柄的输入之中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;amp; 从一个句柄中读取输入并将其写入到另一个句柄的输入中&lt;/li&gt;
&lt;li&gt;&lt;p&gt;| （意义你懂）&lt;br&gt;例如&lt;/p&gt;
&lt;p&gt;mysh &amp;gt; mylog.txt 2&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中2&amp;gt;&amp;amp;1的意思是将错误输出重定向到句柄1的标准输出，综合起来就是mysh命令执行过程中产生的标准输出和错误输出都会被重定向到mylog.txt中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysh &amp;gt; null 2&amp;gt; null
or
mysh &amp;gt; /dev/null 2&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;VNC-Connection&quot;&gt;&lt;a href=&quot;#VNC-Connection&quot; class=&quot;headerlink&quot; title=&quot;VNC Connection&quot;&gt;&lt;/a&gt;VNC Connection&lt;/h2&gt;&lt;p&gt;在装有gnomeGUI的centos系统上安装VNC SERVER&lt;br&gt;切换到root用户下，执行&lt;br&gt;yum install tigervnc-server -y&lt;br&gt;cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service&lt;br&gt;打开并编辑&lt;br&gt;[Service]&lt;br&gt;Type=forking&lt;br&gt;# Clean any existing files in /tmp/.X11-unix environment&lt;br&gt;ExecStartPre=/bin/sh -c ‘/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :’&lt;br&gt;ExecStart=/sbin/runuser -l USER-c “/usr/bin/vncserver %i”&lt;br&gt;PIDFile=/USER/.vnc/%H%i.pid&lt;br&gt;将其中的USER改成你的用户名&lt;br&gt;重启systemd&lt;br&gt;systemctl daemon-reload&lt;br&gt;退回到之前为VNC用户创建密码&lt;br&gt;vncpasswd&lt;br&gt;启用并启动服务&lt;br&gt;systemctl enable vncserver@:1.service&lt;br&gt;systemctl start vncserver@:1.service&lt;br&gt;允许vnc服务通过防火墙&lt;br&gt;firewall-cmd –permanent –add-service vnc-server&lt;br&gt;systemctl restart firewalld.service&lt;/p&gt;
&lt;h2 id=&quot;SSH-Connection&quot;&gt;&lt;a href=&quot;#SSH-Connection&quot; class=&quot;headerlink&quot; title=&quot;SSH Connection&quot;&gt;&lt;/a&gt;SSH Connection&lt;/h2&gt;&lt;p&gt;Linux下SSH登陆有两种途径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码登录&lt;/li&gt;
&lt;li&gt;密钥登陆&lt;br&gt;通常VPS或服务器开通后都是直接提供IP和root密码，使用这种方式就是通过密码方式登录。如果密码不够强壮，而且没有安装DenyHosts之类的防止SSH密码破解的软件，那么系统安全将存在很大的隐患。（PS:DenyHosts是针对SSH服务器的一个基于日志的入侵预防安全工具，是用Python编写的。其通过&lt;strong&gt;&lt;em&gt;监测身份验证登录日志中失败的登录尝试，屏蔽这些登录者的IP地址，&lt;/em&gt;&lt;/strong&gt;从而预防对SSH服务器的暴力破解。）&lt;br&gt;基于密钥的安全验证必须为用户自己创建一对密钥，并把共有的密钥放在需要访问的服务器上。当需要连接到SSH服务器上时，客户端软件就会向服务器发出请求，请求使用客户端的密钥进行安全验证。服务器收到请求之后，先在该用户的根目录下寻找共有密钥，然后把它和发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有的密钥加密“质询”，并把它发送给客户端软件（putty,xshell等）。客户端收到质询之后，就可以用本地的私人密钥解密再把它发送给服务器，这种方式是相当安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;生成密钥&quot;&gt;&lt;a href=&quot;#生成密钥&quot; class=&quot;headerlink&quot; title=&quot;生成密钥&quot;&gt;&lt;/a&gt;生成密钥&lt;/h3&gt;&lt;h4 id=&quot;在Linux服务器端生成密钥&quot;&gt;&lt;a href=&quot;#在Linux服务器端生成密钥&quot; class=&quot;headerlink&quot; title=&quot;在Linux服务器端生成密钥&quot;&gt;&lt;/a&gt;在Linux服务器端生成密钥&lt;/h4&gt;&lt;p&gt;执行ssh-keygem -t rsa&lt;/p&gt;
&lt;h4 id=&quot;使用xshell生成&quot;&gt;&lt;a href=&quot;#使用xshell生成&quot; class=&quot;headerlink&quot; title=&quot;使用xshell生成&quot;&gt;&lt;/a&gt;使用xshell生成&lt;/h4&gt;&lt;h2 id=&quot;grep与正则表达式&quot;&gt;&lt;a href=&quot;#grep与正则表达式&quot; class=&quot;headerlink&quot; title=&quot;grep与正则表达式&quot;&gt;&lt;/a&gt;grep与正则表达式&lt;/h2&gt;&lt;p&gt;grep -[acinv] ‘搜索内容串’ FILENAME&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a   以文本文件方式搜索&lt;/li&gt;
&lt;li&gt;-c   计算找到的符合行的次数&lt;/li&gt;
&lt;li&gt;-i   忽略大小写&lt;/li&gt;
&lt;li&gt;-n   顺便输出行号&lt;/li&gt;
&lt;li&gt;-v  反向选择，即找不符合指定条件的字符串行&lt;br&gt;&lt;strong&gt;其中搜索串可以是正则表达式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;压缩解压命令&quot;&gt;&lt;a href=&quot;#压缩解压命令&quot; class=&quot;headerlink&quot; title=&quot;压缩解压命令&quot;&gt;&lt;/a&gt;压缩解压命令&lt;/h2&gt;&lt;h3 id=&quot;tar命令：&quot;&gt;&lt;a href=&quot;#tar命令：&quot; class=&quot;headerlink&quot; title=&quot;tar命令：&quot;&gt;&lt;/a&gt;tar命令：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# tar -cf all.tar *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.jpg的文件打成一个名为all.tar的包，-c是产生新的包，-f制定包的文件名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -rf all.tar *.gif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.gif文件添加到all.tar的包里面去，-r表示增加文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -tf all.tar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;列出all.tar包里的文件，-t是列出文件的意思&lt;/p&gt;
&lt;p&gt;###tar调用gzip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -czf all.tar.gz *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.jpg文件打成一个tar包，并且将其用gzip压缩，生成一个gzip压缩过的包，包名为all.tar.gz&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -xzf all.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将上面产生的包解开&lt;/p&gt;
&lt;p&gt;###tar调用bzip2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -cjf all.tar.bz2 *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用-j命令调用bzip2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -xjf all.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解包&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对于.tar结尾的文件&lt;br&gt; tar -cf all.tar&lt;br&gt; tar -xf all.tar&lt;/li&gt;
&lt;li&gt;对于.gz结尾的文件&lt;br&gt; gzip -d all.gz&lt;br&gt; gunzip all.gz&lt;/li&gt;
&lt;li&gt;对于.tgz或.tar.gz文件&lt;br&gt; tar -xzf all.tar.gz&lt;br&gt; tar -xzf all.tgz&lt;/li&gt;
&lt;li&gt;对于.bz2结尾的文件&lt;br&gt; bzip2 -d all.bz2&lt;br&gt; bunzip2 all.bz2&lt;/li&gt;
&lt;li&gt;对于tar.bz2结尾的文件&lt;br&gt; tar -xjf all.tar.bz2&lt;/li&gt;
&lt;li&gt;对于.Z结尾的文件&lt;br&gt; uncompress all.Z&lt;/li&gt;
&lt;li&gt;对于.tar.Z结尾的文件&lt;br&gt; tar -xZf all.tar.Z&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;对于win平台常见的zip和rar文件&quot;&gt;&lt;a href=&quot;#对于win平台常见的zip和rar文件&quot; class=&quot;headerlink&quot; title=&quot;对于win平台常见的zip和rar文件&quot;&gt;&lt;/a&gt;对于win平台常见的zip和rar文件&lt;/h3&gt;&lt;p&gt;zip all.zip *.jpg&lt;/p&gt;
&lt;p&gt;unzip all.zip&lt;/p&gt;
&lt;p&gt;在linux下处理.rar文件，需要安装RAR for Linux&lt;/p&gt;
&lt;p&gt;tar -xzpvf rarlinux-3.2.0.tar.gz&lt;br&gt;cd rar&lt;br&gt;make&lt;/p&gt;
&lt;p&gt;rar a all *.jpg&lt;br&gt;程序会自动将rar后缀名附着在all后面&lt;br&gt;unrar e all.rar&lt;/p&gt;
&lt;p&gt;总结&lt;br&gt;1、&lt;em&gt;.tar 用 tar –xvf 解压&lt;br&gt;2、&lt;/em&gt;.gz 用 gzip -d或者gunzip 解压&lt;br&gt;3、*.tar.gz和&lt;em&gt;.tgz 用 tar –xzf 解压&lt;br&gt;4、&lt;/em&gt;.bz2 用 bzip2 -d或者用bunzip2 解压&lt;br&gt;5、&lt;em&gt;.tar.bz2用tar –xjf 解压&lt;br&gt;6、&lt;/em&gt;.Z 用 uncompress 解压&lt;br&gt;7、&lt;em&gt;.tar.Z 用tar –xZf 解压&lt;br&gt;8、&lt;/em&gt;.rar 用 unrar e解压&lt;br&gt;9、*.zip 用 unzip 解压&lt;/p&gt;
&lt;h2 id=&quot;创建和删除软、硬链接&quot;&gt;&lt;a href=&quot;#创建和删除软、硬链接&quot; class=&quot;headerlink&quot; title=&quot;创建和删除软、硬链接&quot;&gt;&lt;/a&gt;创建和删除软、硬链接&lt;/h2&gt;&lt;p&gt;在Linux系统中，内核为每一个新创建的文件分配一个inode（索引节点），每个文件都有一个唯一的inode号，文件属性保存在索引节点中，在访问文件时，索引节点呗复制到内存里，从而实现文件的快速访问。&lt;br&gt;链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法，Linux中包含两种链接：硬链接（Hard Link）和软链接（Soft Link），软链接又称为符号链接（Symbolic Link）。符号链接相当于Windows下的快捷方式。&lt;/p&gt;
&lt;p&gt;###硬链接&lt;br&gt;就是一个指针，指向文件索引节点，系统并不为它重新分配inode，可以用ln命令来创建硬链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln [options] EXISTINGFILE NEWFILE
ln [options] EXISTINGFILE-LIST DIRECORY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-f 建立时，将同档案名删除&lt;br&gt;-i 删除前进行询问&lt;/p&gt;
&lt;p&gt;ln -s abc cde 建立abc 的软链接&lt;br&gt;ln abc cde 建立abc的硬链接&lt;/p&gt;
&lt;p&gt;ln file2 /home/root/file2hard&lt;/p&gt;
&lt;p&gt;如果使用了-f选项，如果newfile已经存在，则无论原来的newfile是什么文件，只用当前用户对它有写权限，newfile就成为EXISTINGFILE的硬链接文件&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可以在不同文件系统的文件间建立链接&lt;/li&gt;
&lt;li&gt;只有超级用户才可以为目录创建硬链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;软链接&quot;&gt;&lt;a href=&quot;#软链接&quot; class=&quot;headerlink&quot; title=&quot;软链接&quot;&gt;&lt;/a&gt;软链接&lt;/h3&gt;&lt;p&gt;软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。甚至可以跨越不同机器、不同网络对文件进行里链接。&lt;br&gt;建立软链接，只要在ln后面加上选项-s&lt;/p&gt;
&lt;p&gt;ln -s FILE1 FILE2&lt;/p&gt;
&lt;h3 id=&quot;删除链接&quot;&gt;&lt;a href=&quot;#删除链接&quot; class=&quot;headerlink&quot; title=&quot;删除链接&quot;&gt;&lt;/a&gt;删除链接&lt;/h3&gt;&lt;p&gt;rm -rf symbolic_name (不加/号！！！)&lt;/p&gt;
&lt;h2 id=&quot;帮助文档&quot;&gt;&lt;a href=&quot;#帮助文档&quot; class=&quot;headerlink&quot; title=&quot;帮助文档&quot;&gt;&lt;/a&gt;帮助文档&lt;/h2&gt;&lt;p&gt;Linux提供了极为详细的帮助工具及文档，一定要养成查帮助文档的习惯（没必要记忆所有东西），可以大大减少需要记忆的东西并提高效率&lt;br&gt;# help Command&lt;br&gt;适用于内部命令&lt;br&gt;举例：&lt;br&gt;# type cd&lt;br&gt;cd is a shell builtin&lt;br&gt;# help cd&lt;br&gt;# type ls&lt;br&gt;ls is aliased to &lt;code&gt;ls --color=auto&amp;#39;
\# help ls
-bash: help: no help topics match&lt;/code&gt;ls’.  Try &lt;code&gt;help help&amp;#39; or&lt;/code&gt;man -k ls’ or `info ls’.&lt;br&gt;# Command –help/-h&lt;br&gt;适用于外部命令&lt;br&gt;例如：&lt;br&gt;# ls –help&lt;br&gt;# man Command&lt;br&gt;manual 手册，是分章节；man # Command （#表示章节号）&lt;br&gt;1、所有用户可以使用的命令&lt;br&gt;2、系统内核调用，不是每个命令都有系统调用（如：man 2 read）&lt;br&gt;3、库调用&lt;br&gt;4、特殊文件，如：/dev/tty1&lt;br&gt;5、文件格式（命令配置文件的语法，如：man 5 passwd）&lt;br&gt;6、游戏相关&lt;br&gt;7、杂项&lt;br&gt;8、管理员命令，如：fdisk&lt;br&gt;man命令查询操作参考《vi,vim用法》中命令模式&lt;br&gt;看懂man命令语法&lt;br&gt;[]：可选内容&lt;br&gt;&amp;lt;&amp;gt;：必须给出内容&lt;br&gt;a|b|c：多选一&lt;br&gt;…：可以有多个&lt;br&gt;# info Command&lt;br&gt;有超链接稳文档，info是信息页，提供作者、版本，什么时候发布等更详细信息，man是手册告诉你怎么用&lt;br&gt;README&lt;br&gt;绝大多数程序都有相应的帮助文档，保存在/usr/share/doc文件夹中&lt;br&gt;如：&lt;br&gt;# ls /usr/share/doc/ntp-4.2.4p8/&lt;br&gt;ChangeLog  COPYRIGHT  NEWS&lt;br&gt;Google&lt;br&gt;遇到问题，二话不说Google，优先参考项目官方文档&lt;/p&gt;
&lt;p&gt;##识别进程的占用CPU/Memory，使用renice调整进程优先级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU占用最多的前10个进程：&lt;br&gt;ps auxw | head -1; ps auxw | sort -rn -k3 | head -10&lt;/li&gt;
&lt;li&gt;内存占用最多的前10个进程：&lt;br&gt;ps auxw | head -1; ps auxw | sort -rn -k4 | head&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ps命令下常用参数含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%MEM 进程的内存占用率&lt;/li&gt;
&lt;li&gt;VSZ 进程所使用的虚拟内存大小&lt;/li&gt;
&lt;li&gt;RSS 进程使用的驻留集大小或者是实际内存的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps -aux | sort -k4nr | head -n 5&lt;/p&gt;
&lt;p&gt;-k4nr是sort命令的参数,k4表示比较的是第四个key,也就是内存占用%的那一列,n是按照数字方式来比较,r表示反转排序结果,默认是从低到高,r之后就变成从高到低.如果你要用展示最初的5条,应该再加上head -n 5.而不是直接用head 5.&lt;/p&gt;
&lt;h2 id=&quot;NFS搭建&quot;&gt;&lt;a href=&quot;#NFS搭建&quot; class=&quot;headerlink&quot; title=&quot;NFS搭建&quot;&gt;&lt;/a&gt;NFS搭建&lt;/h2&gt;&lt;h3 id=&quot;building&quot;&gt;&lt;a href=&quot;#building&quot; class=&quot;headerlink&quot; title=&quot;building&quot;&gt;&lt;/a&gt;building&lt;/h3&gt;&lt;p&gt;一、安装 NFS 服务器所需的软件包：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;yum install -y nfs-utils&lt;br&gt;二、编辑exports文件，添加从机&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;vim /etc/exports&lt;br&gt;/data 192.168.0.100(rw,sync,fsid=0)  192.168.0.101(rw,sync,fsid=0)&lt;br&gt;192.168.0.100 和192.168.0.101两台机器可以挂载NFS服务器上的/data目录到自己的文件系统中&lt;/p&gt;
&lt;p&gt;rw表示可读写；sync表示同步写，fsid=0表示将/data找个目录包装成根目录&lt;/p&gt;
&lt;p&gt;三、启动nfs服务&lt;/p&gt;
&lt;p&gt;先为rpcbind和nfs做开机启动：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;systemctl enable rpcbind.service&lt;br&gt;systemctl enable nfs-server.service&lt;br&gt;然后分别启动rpcbind和nfs服务：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;systemctl start rpcbind.service&lt;br&gt;systemctl start nfs-server.service&lt;br&gt;确认NFS服务器启动成功：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;rpcinfo -p&lt;br&gt;检查 NFS 服务器是否挂载我们想共享的目录 /data：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;exportfs&lt;br&gt;#可以查看到已经ok&lt;br&gt;/data           192.168.0.100&lt;br&gt;/data           192.168.0.101&lt;br&gt;四、在从机上安装NFS 客户端&lt;/p&gt;
&lt;p&gt;首先是安裝nfs，同上，然后启动rpcbind服务&lt;/p&gt;
&lt;p&gt;先为rpcbind做开机启动：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;systemctl enable rpcbind.service&lt;br&gt;然后启动rpcbind服务：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;systemctl start rpcbind.service&lt;br&gt;注意：客户端不需要启动nfs服务&lt;/p&gt;
&lt;p&gt;自动挂载&lt;br&gt;在/etc/rc.d/rc.local中添加一行&lt;br&gt;mount -t nfs IP:directory  /localdirectory&lt;br&gt;然后执行&lt;br&gt;chmod +x /etc/rc.d/rc.local&lt;/p&gt;
&lt;p&gt;阿里云上的nfs搭建指南&lt;br&gt;&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/6709580.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://help.aliyun.com/knowledge_detail/6709580.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###mount&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount -t nfs xxx.xxx.xxx.xxx:/NFSPATH /LOCALPATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要设置客户端启动时就挂载nfs，可以设置/etc/fstab，添加&lt;br&gt;xxx.xxx.xxx.xxx:/NFSPATH    /LOCALPATH nfs auto, rw, vers=3, hard, intr, tcp, rsize=32768, wsize=32768    0 0&lt;/p&gt;
&lt;h2 id=&quot;进程优先级&quot;&gt;&lt;a href=&quot;#进程优先级&quot; class=&quot;headerlink&quot; title=&quot;进程优先级&quot;&gt;&lt;/a&gt;进程优先级&lt;/h2&gt;&lt;p&gt;1.新建一个进程并设置优先级&lt;br&gt;将当前目录下的documents目录打包，但不希望tar占用太多CPU：&lt;br&gt;nice-19 tar -zcf pack.tar.gz documents&lt;br&gt;方法非常简单，即在原命令前加上“nice -19”。很多人可能有疑问了，最低优先级不是19么？那是因为这个“-19”中的“-”仅表示参数前缀；所以，如果希望：&lt;br&gt;将当前目录下的documents目录打包，并且赋予tar进程最高的优先级：&lt;br&gt;nice –19 tar -zcf pack.tar.gz documents&lt;br&gt;2.修改已经存在的进程的优先级&lt;br&gt;将PID为1799的进程优先级设置为最低（19）：&lt;br&gt;renice 19 1799&lt;br&gt;将PID为1799的进程优先级设置为最高（-19）：&lt;br&gt;renice-19 1799&lt;br&gt;大家很可能发现了，renice命令与nice命令的优先级参数的形式是相反的。直接以优先级作为参数即可，不能加上“-”号，这点需要初学者注意。&lt;/p&gt;
&lt;p&gt;3.查看进程优先级&lt;br&gt;直接使用top命令即可查看进程优先级。&lt;br&gt;Linux对于进程优先级调整的作用还是非常明显的，在实际操作中也能明显的体会到。&lt;/p&gt;
&lt;p&gt;##重置root密码&lt;br&gt;rd.break重置密码&lt;/p&gt;
&lt;p&gt;1、启动的时候，在启动界面，相应启动项，内核名称上按“e”；&lt;/p&gt;
&lt;p&gt;2、进入后，找到linux16开头的地方，按“end”键到最后，输入rd.break，按ctrl+x进入。或者打到linux16 中ro的位置，执行ctrl +k 删除到行尾，再增加rd.break；&lt;/p&gt;
&lt;p&gt;3、进去后输入命令mount，发现根为/sysroot/，并且不能写，只有ro=readonly权限；&lt;/p&gt;
&lt;p&gt;4、mount -o remount,rw /sysroot/，重新挂载，之后mount，发现有了r,w权限；&lt;/p&gt;
&lt;p&gt;5、chroot /sysroot/ 改变根；&lt;/p&gt;
&lt;p&gt;（1）echo redhat|passwd –stdin root 修改root密码为redhat，或者输入passwd，交互修改；&lt;/p&gt;
&lt;p&gt;（2）还有就是先cp一份，然后修改/etc/shadow文件&lt;/p&gt;
&lt;p&gt;6、touch /.autorelabel 这句是为了selinux生效，重新扫描磁盘标签，autorelabel 是一个隐藏文件，前面有点，而且一定不能写错，不然reboot时会卡住。&lt;/p&gt;
&lt;p&gt;7、ctrl+d 退出&lt;/p&gt;
&lt;p&gt;8、然后reboot&lt;/p&gt;
&lt;p&gt;至此，密码修改完成&lt;/p&gt;
&lt;h2 id=&quot;创建、删除分区&quot;&gt;&lt;a href=&quot;#创建、删除分区&quot; class=&quot;headerlink&quot; title=&quot;创建、删除分区&quot;&gt;&lt;/a&gt;创建、删除分区&lt;/h2&gt;&lt;h3 id=&quot;ext4&quot;&gt;&lt;a href=&quot;#ext4&quot; class=&quot;headerlink&quot; title=&quot;ext4&quot;&gt;&lt;/a&gt;ext4&lt;/h3&gt;&lt;p&gt;选择要进行操作的磁盘：&lt;br&gt;fdisk /dev/sdb&lt;br&gt;输入m列出可执行的命令&lt;br&gt;输入p列出磁盘目前的分区情况&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Command (m for help): p 
Disk /dev/sdb: 3221 MB, 3221225472 bytes 255 heads, 63 sectors/track, 391 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes 
Device Boot Start End Blocks Id System 
/dev/sdb1 1 1 8001 8e Linux LVM /dev/sdb2 2 26 200812+ 83 Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入d然后选择分区，删除现有分区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1464097914658.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;输入p，查看分区情况，确认已删除后输入n简历新的磁盘分区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1464097954320.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;##（自动）挂载、卸载和使用LUKS-encrypted 文件系统&lt;br&gt;cryptsetup luksFormat /dev/sdb&lt;br&gt;cryptsetup luksOpen /dev/sdb cryp&lt;br&gt;dd if=/dev/urandom of=/root/keyfile1 bs=1024 count=4&lt;br&gt;chmod 0400 /root/keyfile1&lt;br&gt;cryptsetup luksAddKey /dev/sdb /root/keyfile1&lt;br&gt;mkfs.xfs /dev/mapper/cryp&lt;br&gt;echo “/dev/mapper/cryp /mnt/1t xfs defaults 1 2” &amp;gt;&amp;gt; /etc/fstab&lt;br&gt;echo “cryp /dev/sdb /root/keyfile1 luks” &amp;gt;&amp;gt; /etc/crypttab&lt;br&gt;mount -a&lt;/p&gt;
&lt;h2 id=&quot;GPT-TO-MBR&quot;&gt;&lt;a href=&quot;#GPT-TO-MBR&quot; class=&quot;headerlink&quot; title=&quot;GPT TO MBR&quot;&gt;&lt;/a&gt;GPT TO MBR&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;@(我的第一个笔记本)[Linux, RHCSA]&lt;/p&gt;
&lt;h1 id=&quot;RHCSA-Note&quot;&gt;&lt;a href=&quot;#RHCSA-Note&quot; class=&quot;headerlink&quot; title=&quot;RHCSA Note&quot;&gt;&lt;/a&gt;RHCSA Note&lt;/h1&gt;&lt;h2 id=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux WEB 服务器性能优化</title>
    <link href="http://yoursite.com/2016/04/20/Linux-WEB-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/04/20/Linux-WEB-服务器性能优化/</id>
    <published>2016-04-20T08:10:16.000Z</published>
    <updated>2016-04-20T08:10:16.853Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2016/04/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/19/正则表达式/</id>
    <published>2016-04-19T14:30:16.000Z</published>
    <updated>2016-04-19T14:42:54.937Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;自己的一个正则表达式学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##精确查找hi这个单词&lt;br&gt;     \bhi \b&lt;br&gt;\b是正则表达式中的一个特殊代码，学名为：元字符（metacharactor），代表着单词的开始和结尾，也就是单词的分界处，虽然英文单词通常是由空格、标点符号或换行符来表示分隔的，但是\b并不care那么多，它只是匹配一个相对位置。&lt;br&gt;假如你要找的是hi之后不远处的lucy这个单词，你可以使用&lt;br&gt;     \bhi \b. &lt;em&gt;\blucy\b&lt;br&gt;. 是另一个元字符，表示除换行符之外的所有字符，&lt;/em&gt;同样是元字符，表示前边的字符可以连续重复使用任意次以使整个表达式得到匹配。so，.*连到一起表示任意数量的不含换行符的字符。&lt;br&gt;如果同时使用多种元字符，我们可以构造出强大的正则表达式，如下所示&lt;br&gt;     0\d\d-\d\d\d\d\d\d\d\d&lt;br&gt;这个表达式以0开头，之后是两个数字，然后一个连字号，最后八个数字，我们可以看出其代表中国某些城市的电话号码，这里的\d是新的元字符，代表一位数字；- 不是元字符，仅表示其自身。为了避免太多的\d的重复，我们可以将其写为：&lt;br&gt;     0\d{2}-\d{8}（易知花括号中指代重复匹配次数）&lt;/p&gt;
&lt;p&gt;###其他元字符：&lt;br&gt;     &lt;em&gt;\s  匹配任意的空格、制表符、换行符、中文全角空格等
     &lt;/em&gt;\w  匹配字母、数字、下划线、汉字&lt;br&gt;     &lt;em&gt;^  匹配字符串的开始
     &lt;/em&gt;$  匹配字符串的结尾&lt;br&gt;例如：&lt;br&gt;     \ba\w&lt;em&gt;\b匹配由字母a开头的单词&lt;br&gt;     \d+匹配一个或更多连续的数字，这里的+指的是重复次数大于等于1，&lt;/em&gt;的重复次数大于等于0&lt;br&gt;     \b\w{6}\b匹配刚好六个字符的单词&lt;br&gt;     如一个网站要验证你输入的qq号，可使用^\d{5, 12}$（{5，12}指重复次数不能少于五次，不能多于十二次）&lt;br&gt;如果你想查找元字符本身的话，使用\来取消对这些字符的特殊意思（类似其他编程语言）如：.     *     \d     \w     \等&lt;/p&gt;
&lt;p&gt;###重复：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* *：重复零次或更多次
*.：重复一次或更多次
*？：重复零次或一次
*{n}：重复n次
*{n, }：重复n次或多于n次
*{n, m}：重复n到m次
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：&lt;br&gt;     Windows\d+     匹配Windows后一个或更多数字&lt;br&gt;     ^\w+匹配这一行最开头的一个单词&lt;/p&gt;
&lt;p&gt;##字符类：&lt;br&gt;     通过上文我们已经介绍了查找数字，字母或数字，空格等字符的元字符，但有些字符如英语元音字母（aeiou）之类的并没有被元字符制定。针对此情况，我们只需要在方括号中列出他们就行了，如[aeiou]就匹配任意一个英文元音字母，[.?,]则匹配英文标点符号.?,     ，我们也可以轻易指定一个字符范围，像[0-9]代表的含义就和\d是一样的，同理，[a-z0-9A-Z]与\w同义（如果只考虑英文的话）&lt;br&gt;祭出一个复杂的表达式：&lt;br&gt;     (?0\d{2}[)-]?\d{8}&lt;br&gt;这个表达式可以匹配几种格式的电话号码，像(010)12345678, 010-12345678, 01012345678。改表达式首先是一个转义字符(?，表示有零个或一个（符号，0则表示数字0，\d[2]表示0后两位数字，[)-]?表示)或-这两种字符出现0次或1次，\d{8}表示之后又8位数字。&lt;br&gt;上述表达式也能匹配到诸如010)12345678或(010-12345678等错误格式，因此我们需要引入“分支条件”，正则表达式中的分支条件指有几种规则，若满足其中一种则当成匹配，具体方法是用 | 把不同的规则分隔开，如&lt;br&gt;     \d{2}-\d{8}|\d{3}-\d{8}这个表达式能匹配两种连字号型的电话号码&lt;br&gt;     (?0\d{2})?[- ]?\d{8}|0\d{2}[- ]?\d{8}匹配三位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号和本地号之间可以用连字符或者空格间隔，也可以没有间隔&lt;br&gt;     \d{5}-\d(4)|\d{5}匹配美国邮政编码，此例应注意分支先后顺序！&lt;/p&gt;
&lt;p&gt;##分组：&lt;br&gt;     我们已经提到了怎么重复单个字符，但是想重复多个字符该怎么办？你可以使用小括号来制定子表达式，如：&lt;br&gt;     (\d{1,3}.){3}\d{1,3}&lt;br&gt;这是一个简单的ip地址匹配表达式，因为其太简单了，也会匹配到222.333.444.555此类的错误形式。下例提供一个正确的表达式：&lt;br&gt;     ((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[5]|[01]?\d\d?)&lt;/p&gt;
&lt;p&gt;##反义：&lt;br&gt;     &lt;em&gt;有时候需要查找不属于某个能简单定义的字符类的字符，此时需要用到反义
     &lt;/em&gt;\W匹配不是字母、数字、下划线、汉字的字符&lt;br&gt;     &lt;em&gt;\S匹配不是空白符的字符
     &lt;/em&gt;\D匹配任意非数字的字符&lt;br&gt;     &lt;em&gt;\B匹配不是单词开头或结尾的位置
     &lt;/em&gt;[^x]匹配除x外的任意字符&lt;br&gt;     &lt;em&gt;[^aeiou]匹配除aeiou外的任意字符
     &lt;/em&gt;\S+匹配不包含空白符的字符串&lt;br&gt;     *&lt;a[^&gt;]+&amp;gt;用尖括号括起来的以a开头的字符串&lt;/a[^&gt;&lt;/p&gt;
&lt;p&gt;##后向引用：&lt;br&gt;     使用小括号指定一个子表达式后，匹配这个表达式的文本可以在表达式或其他程序中做进一步处理，默认情况下，每个分组都会自动有个组号，规则是：从左到右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推。例如：&lt;br&gt;     \b(\w+)\b\s+\1\b用来匹配重复的单词，像go go，或者kitty kitty，这个表达式首先是一个单词，也就是单词开始处到结尾处之间的多于一个的字母或数字（\b(\w+)\b），这个单词会捕获到编号为1的分组中，然后是一个或多个空白符，，最后是分组1捕获的内容。&lt;br&gt;要制定一个子表达式的组名，则使用：(?&lt;word&gt;\w+)把尖括号换成’也行，这样就把组名指定为word了，这个单词会被捕获到编号为1的分组中，要反向引用这个分组的字符，可以使用\k&lt;word&gt;，所以上例可以写为\b(?&lt;word&gt;\w+)\b\s+\k&lt;word&gt;\b&lt;br&gt;(?:exp)匹配exp，不捕获匹配文本，也不为其分配组号&lt;/word&gt;&lt;/word&gt;&lt;/word&gt;&lt;/word&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己的一个正则表达式学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##精确查找hi这个单词&lt;br&gt;     \bhi \b&lt;br&gt;\b是正则表达式中的一个特殊代码，学名为：元字符（metacharactor），代表着单词的开始和结尾，也就是单
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>LM35温度传感器使用（Arduino）</title>
    <link href="http://yoursite.com/2016/03/12/LM35%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/03/12/LM35温度传感器/</id>
    <published>2016-03-12T12:51:48.000Z</published>
    <updated>2016-03-12T13:30:50.042Z</updated>
    
    <content type="html">&lt;p&gt;Arduino下温度转换：&lt;br&gt;模拟口输入：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TEM=analogRead(potPin)*(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)*(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把读取到的val转换为温度数值,系数一：0.00488125=5/1024,0~5V对应模拟口读数&lt;br&gt;1~1024,系数二：100=1000/10,1000是毫伏与伏的转换；10是每10毫伏对应一度温升。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Arduino下温度转换：&lt;br&gt;模拟口输入：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
    
    </summary>
    
      <category term="Arduino" scheme="http://yoursite.com/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>a little introduction</title>
    <link href="http://yoursite.com/2016/03/12/introduction/"/>
    <id>http://yoursite.com/2016/03/12/introduction/</id>
    <published>2016-03-11T16:00:00.000Z</published>
    <updated>2016-05-29T11:17:06.146Z</updated>
    
    <content type="html">&lt;p&gt;Hey guys, i’m nikeneo&lt;/p&gt;
&lt;p&gt;my tags: Operation&amp;amp;Maintenance, Arduino, ReverseEngineering&lt;/p&gt;
&lt;p&gt;This is my first time to build my blog with Node.js, it’s really cool!&lt;/p&gt;
&lt;p&gt;不忘初心，方得始终&lt;/p&gt;
&lt;p&gt;Email: nikeneo#foxmail.com&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Hey guys, i’m nikeneo&lt;/p&gt;
&lt;p&gt;my tags: Operation&amp;amp;Maintenance, Arduino, ReverseEngineering&lt;/p&gt;
&lt;p&gt;This is my first time to build my blo
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
  </entry>
  
</feed>
