<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikeneo&#39;s TechZone</title>
  <subtitle>Nikeneo的技术栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-19T14:42:54.937Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nikeneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2016/04/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/19/正则表达式/</id>
    <published>2016-04-19T14:30:16.000Z</published>
    <updated>2016-04-19T14:42:54.937Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;自己的一个正则表达式学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##精确查找hi这个单词&lt;br&gt;     \bhi \b&lt;br&gt;\b是正则表达式中的一个特殊代码，学名为：元字符（metacharactor），代表着单词的开始和结尾，也就是单词的分界处，虽然英文单词通常是由空格、标点符号或换行符来表示分隔的，但是\b并不care那么多，它只是匹配一个相对位置。&lt;br&gt;假如你要找的是hi之后不远处的lucy这个单词，你可以使用&lt;br&gt;     \bhi \b. &lt;em&gt;\blucy\b&lt;br&gt;. 是另一个元字符，表示除换行符之外的所有字符，&lt;/em&gt;同样是元字符，表示前边的字符可以连续重复使用任意次以使整个表达式得到匹配。so，.*连到一起表示任意数量的不含换行符的字符。&lt;br&gt;如果同时使用多种元字符，我们可以构造出强大的正则表达式，如下所示&lt;br&gt;     0\d\d-\d\d\d\d\d\d\d\d&lt;br&gt;这个表达式以0开头，之后是两个数字，然后一个连字号，最后八个数字，我们可以看出其代表中国某些城市的电话号码，这里的\d是新的元字符，代表一位数字；- 不是元字符，仅表示其自身。为了避免太多的\d的重复，我们可以将其写为：&lt;br&gt;     0\d{2}-\d{8}（易知花括号中指代重复匹配次数）&lt;/p&gt;
&lt;p&gt;###其他元字符：&lt;br&gt;     &lt;em&gt;\s  匹配任意的空格、制表符、换行符、中文全角空格等
     &lt;/em&gt;\w  匹配字母、数字、下划线、汉字&lt;br&gt;     &lt;em&gt;^  匹配字符串的开始
     &lt;/em&gt;$  匹配字符串的结尾&lt;br&gt;例如：&lt;br&gt;     \ba\w&lt;em&gt;\b匹配由字母a开头的单词&lt;br&gt;     \d+匹配一个或更多连续的数字，这里的+指的是重复次数大于等于1，&lt;/em&gt;的重复次数大于等于0&lt;br&gt;     \b\w{6}\b匹配刚好六个字符的单词&lt;br&gt;     如一个网站要验证你输入的qq号，可使用^\d{5, 12}$（{5，12}指重复次数不能少于五次，不能多于十二次）&lt;br&gt;如果你想查找元字符本身的话，使用\来取消对这些字符的特殊意思（类似其他编程语言）如：.     *     \d     \w     \等&lt;/p&gt;
&lt;p&gt;###重复：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* *：重复零次或更多次
*.：重复一次或更多次
*？：重复零次或一次
*{n}：重复n次
*{n, }：重复n次或多于n次
*{n, m}：重复n到m次
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：&lt;br&gt;     Windows\d+     匹配Windows后一个或更多数字&lt;br&gt;     ^\w+匹配这一行最开头的一个单词&lt;/p&gt;
&lt;p&gt;##字符类：&lt;br&gt;     通过上文我们已经介绍了查找数字，字母或数字，空格等字符的元字符，但有些字符如英语元音字母（aeiou）之类的并没有被元字符制定。针对此情况，我们只需要在方括号中列出他们就行了，如[aeiou]就匹配任意一个英文元音字母，[.?,]则匹配英文标点符号.?,     ，我们也可以轻易指定一个字符范围，像[0-9]代表的含义就和\d是一样的，同理，[a-z0-9A-Z]与\w同义（如果只考虑英文的话）&lt;br&gt;祭出一个复杂的表达式：&lt;br&gt;     (?0\d{2}[)-]?\d{8}&lt;br&gt;这个表达式可以匹配几种格式的电话号码，像(010)12345678, 010-12345678, 01012345678。改表达式首先是一个转义字符(?，表示有零个或一个（符号，0则表示数字0，\d[2]表示0后两位数字，[)-]?表示)或-这两种字符出现0次或1次，\d{8}表示之后又8位数字。&lt;br&gt;上述表达式也能匹配到诸如010)12345678或(010-12345678等错误格式，因此我们需要引入“分支条件”，正则表达式中的分支条件指有几种规则，若满足其中一种则当成匹配，具体方法是用 | 把不同的规则分隔开，如&lt;br&gt;     \d{2}-\d{8}|\d{3}-\d{8}这个表达式能匹配两种连字号型的电话号码&lt;br&gt;     (?0\d{2})?[- ]?\d{8}|0\d{2}[- ]?\d{8}匹配三位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号和本地号之间可以用连字符或者空格间隔，也可以没有间隔&lt;br&gt;     \d{5}-\d(4)|\d{5}匹配美国邮政编码，此例应注意分支先后顺序！&lt;/p&gt;
&lt;p&gt;##分组：&lt;br&gt;     我们已经提到了怎么重复单个字符，但是想重复多个字符该怎么办？你可以使用小括号来制定子表达式，如：&lt;br&gt;     (\d{1,3}.){3}\d{1,3}&lt;br&gt;这是一个简单的ip地址匹配表达式，因为其太简单了，也会匹配到222.333.444.555此类的错误形式。下例提供一个正确的表达式：&lt;br&gt;     ((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[5]|[01]?\d\d?)&lt;/p&gt;
&lt;p&gt;##反义：&lt;br&gt;     &lt;em&gt;有时候需要查找不属于某个能简单定义的字符类的字符，此时需要用到反义
     &lt;/em&gt;\W匹配不是字母、数字、下划线、汉字的字符&lt;br&gt;     &lt;em&gt;\S匹配不是空白符的字符
     &lt;/em&gt;\D匹配任意非数字的字符&lt;br&gt;     &lt;em&gt;\B匹配不是单词开头或结尾的位置
     &lt;/em&gt;[^x]匹配除x外的任意字符&lt;br&gt;     &lt;em&gt;[^aeiou]匹配除aeiou外的任意字符
     &lt;/em&gt;\S+匹配不包含空白符的字符串&lt;br&gt;     *&lt;a[^&gt;]+&amp;gt;用尖括号括起来的以a开头的字符串&lt;/a[^&gt;&lt;/p&gt;
&lt;p&gt;##后向引用：&lt;br&gt;     使用小括号指定一个子表达式后，匹配这个表达式的文本可以在表达式或其他程序中做进一步处理，默认情况下，每个分组都会自动有个组号，规则是：从左到右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推。例如：&lt;br&gt;     \b(\w+)\b\s+\1\b用来匹配重复的单词，像go go，或者kitty kitty，这个表达式首先是一个单词，也就是单词开始处到结尾处之间的多于一个的字母或数字（\b(\w+)\b），这个单词会捕获到编号为1的分组中，然后是一个或多个空白符，，最后是分组1捕获的内容。&lt;br&gt;要制定一个子表达式的组名，则使用：(?&lt;word&gt;\w+)把尖括号换成’也行，这样就把组名指定为word了，这个单词会被捕获到编号为1的分组中，要反向引用这个分组的字符，可以使用\k&lt;word&gt;，所以上例可以写为\b(?&lt;word&gt;\w+)\b\s+\k&lt;word&gt;\b&lt;br&gt;(?:exp)匹配exp，不捕获匹配文本，也不为其分配组号&lt;/word&gt;&lt;/word&gt;&lt;/word&gt;&lt;/word&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己的一个正则表达式学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##精确查找hi这个单词&lt;br&gt;     \bhi \b&lt;br&gt;\b是正则表达式中的一个特殊代码，学名为：元字符（metacharactor），代表着单词的开始和结尾，也就是单
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>LM35温度传感器使用（Arduino）</title>
    <link href="http://yoursite.com/2016/03/12/LM35%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/03/12/LM35温度传感器/</id>
    <published>2016-03-12T12:51:48.000Z</published>
    <updated>2016-03-12T13:30:50.042Z</updated>
    
    <content type="html">&lt;p&gt;Arduino下温度转换：&lt;br&gt;模拟口输入：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TEM=analogRead(potPin)*(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)*(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把读取到的val转换为温度数值,系数一：0.00488125=5/1024,0~5V对应模拟口读数&lt;br&gt;1~1024,系数二：100=1000/10,1000是毫伏与伏的转换；10是每10毫伏对应一度温升。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Arduino下温度转换：&lt;br&gt;模拟口输入：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
    
    </summary>
    
      <category term="Arduino" scheme="http://yoursite.com/categories/Arduino/"/>
    
    
  </entry>
  
  <entry>
    <title>Nikeneo的自我介绍</title>
    <link href="http://yoursite.com/2016/03/12/introduction/"/>
    <id>http://yoursite.com/2016/03/12/introduction/</id>
    <published>2016-03-12T08:11:19.000Z</published>
    <updated>2016-03-12T14:38:08.661Z</updated>
    
    <content type="html">&lt;p&gt;我是nikeneo，欢迎大家来到我的博客。&lt;/p&gt;
&lt;p&gt;现在是西南地区某软件专修学院信息安全专业大二学生，应用开发、web渗透、软件逆向、电子制作都是我的菜，某种程度上我认为它们是相辅相成。&lt;/p&gt;
&lt;p&gt;第一次使用基于Node.js的博客框架构建博客，很多地方还待完善，但终归会变好的。。&lt;/p&gt;
&lt;p&gt;不忘初心，方得始终&lt;/p&gt;
&lt;p&gt;Email: nikeneo#foxmail.com&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我是nikeneo，欢迎大家来到我的博客。&lt;/p&gt;
&lt;p&gt;现在是西南地区某软件专修学院信息安全专业大二学生，应用开发、web渗透、软件逆向、电子制作都是我的菜，某种程度上我认为它们是相辅相成。&lt;/p&gt;
&lt;p&gt;第一次使用基于Node.js的博客框架构建博客，很多地方还待完善，
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
