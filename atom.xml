<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikeneo&#39;s TechZone</title>
  <subtitle>Nikeneo的技术栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-16T12:43:18.026Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nikeneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell——AWK</title>
    <link href="http://yoursite.com/2016/09/16/Shell%E2%80%94%E2%80%94AWK/"/>
    <id>http://yoursite.com/2016/09/16/Shell——AWK/</id>
    <published>2016-09-15T16:00:00.000Z</published>
    <updated>2016-09-16T12:43:18.026Z</updated>
    
    <content type="html">&lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——AWK&quot;&gt;&lt;a href=&quot;#Shell——AWK&quot; class=&quot;headerlink&quot; title=&quot;Shell——AWK&quot;&gt;&lt;/a&gt;Shell——AWK&lt;/h1&gt;&lt;p&gt;awk是个强大的文本分析工具，其对数据进行分析并生成报告时功能非常强大，简单来说awk是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;awk &amp;apos;{pattern + action}&amp;apos; {filename}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pattern表示awk在数据中查找的内容，而action表示在匹配内容时所执行的一系列命令，花括号{}不需要在程序中始终出现，但他们用于根据特定的模式对一系列指令进行分组。pattern就是要表示的正则表达式，用斜杠括起来，awk语言的最基本功能就是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他的文本操作，完整的awk脚本通常用来格式化文本文件中的信息。&lt;br&gt;通常awk是以文件的一行为处理单位的，awk没接收文件的一行，然后执行响应的命令，来处理文本。&lt;/p&gt;
&lt;p&gt;##实例&lt;br&gt;假如我们查看web服务器日志，输出如下&lt;br&gt;&lt;img src=&quot;./1474019815474.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;如果只是显示最近访问的五个IP&lt;br&gt;&lt;img src=&quot;./1474021721001.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;awk工作流程是读入有’\n’换行符分隔的一条记录，然后将记录按指定的域分隔符划分域，填充域；\$0则表示所有的域，$n表示第n个域，默认的域分隔符是空格键或tab键&lt;/p&gt;
&lt;p&gt;如果只显示登录日期和时间&lt;br&gt;&lt;img src=&quot;./1474021862373.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;这种是awk+action的实例，每行都会执行action{print$1}&lt;br&gt;-F指定域分隔符为’:’&lt;br&gt;如果只是显示/etc/passwd的账户和账户对应的shell，且账户和shell之间以tab键分隔&lt;br&gt;&lt;img src=&quot;./1474022118884.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;如果只是显示IP地址、访问时间、访问类型和访问路径，而彼此之间以逗号分隔，而且在所有行添加列名==========START==========，在最后一行添加==========END==========&lt;br&gt;&lt;img src=&quot;./1474022514519.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;搜索/etc/passwd有root关键字的所有行，并显示对应的shell&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;awk -F: &lt;span class=&quot;string&quot;&gt;&#39;/root/&amp;#123;print $7&amp;#125;&#39;&lt;/span&gt; /etc/passwd             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;awk内置变量&quot;&gt;&lt;a href=&quot;#awk内置变量&quot; class=&quot;headerlink&quot; title=&quot;awk内置变量&quot;&gt;&lt;/a&gt;awk内置变量&lt;/h2&gt;&lt;p&gt;awk有许多内置变量用来设置环境信息，这些变量可以改变，下面给出了最常用的一些变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARGC    命令行参数个数&lt;/li&gt;
&lt;li&gt;ARGV    命令行参数排列&lt;/li&gt;
&lt;li&gt;ENVIRON 支持队列中系统环境变量的使用&lt;/li&gt;
&lt;li&gt;FILENAME awk浏览的文件名&lt;/li&gt;
&lt;li&gt;FNR     浏览文件的记录数&lt;/li&gt;
&lt;li&gt;FS       设置输入域分隔符，等价于-F选项&lt;/li&gt;
&lt;li&gt;NF       浏览记录域的个数&lt;/li&gt;
&lt;li&gt;NR       已读的记录数&lt;/li&gt;
&lt;li&gt;OFS     输出域分隔符&lt;/li&gt;
&lt;li&gt;ORS     输出记录分隔符&lt;/li&gt;
&lt;li&gt;RS      控制记录分隔符&lt;br&gt;例如，统计/etc/passwd文件名，每行的行号，每行的列数，对应的完整行内容&lt;br&gt;&lt;img src=&quot;./1474026577261.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;使用printf替代print可以使代码更加简洁&lt;h2 id=&quot;awk编程&quot;&gt;&lt;a href=&quot;#awk编程&quot; class=&quot;headerlink&quot; title=&quot;awk编程&quot;&gt;&lt;/a&gt;awk编程&lt;/h2&gt;除了awk的内置变量，awk还可以自定义变量，比如要统计/etc/passwd的账户人数&lt;br&gt;&lt;img src=&quot;./1474027238703.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;img src=&quot;./1474027244963.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;count是自定义变量，之前的action{}里都是只有一个printed，其实printed只是一个语句，而action{}可以有多个语句，以;号隔开&lt;br&gt;统计某个文件夹下文件占用的字节数&lt;br&gt;&lt;img src=&quot;./1474027664606.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;如果以M为单位&lt;br&gt;&lt;img src=&quot;./1474027726252.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;统计某个文件夹下文件占用的字节数，过滤4096大小的文件（一般都是文件夹）（if条件判断）&lt;br&gt;&lt;img src=&quot;./1474029382538.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;显示/etc/passwd的账户（for循环）&lt;br&gt;&lt;img src=&quot;./1474029571479.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——AWK&quot;&gt;&lt;a href=&quot;#Shell——AWK&quot; class=&quot;headerlink&quot; title=&quot;Shell——AWK&quot;&gt;&lt;/a&gt;Shell——AWK&lt;/h1&gt;&lt;p&gt;awk是个强大的文
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--IO</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93IO/"/>
    <id>http://yoursite.com/2016/09/05/Python–IO/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:51:29.479Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–IO&quot;&gt;&lt;a href=&quot;#Python–IO&quot; class=&quot;headerlink&quot; title=&quot;Python–IO&quot;&gt;&lt;/a&gt;Python–IO&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;/user/michael/test.txt&amp;apos;, &amp;apos;r&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示&lt;/p&gt;
&lt;p&gt;最后一步调用close()方法关闭文件。&lt;/p&gt;
&lt;p&gt;文件读写时可能产生IOError，一旦出错，f.close()就不会调用，所以，需要使用try…finally来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f = open(&amp;apos;/path/to/file&amp;apos;, &amp;apos;r&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(f.read())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;/path/file&amp;apos;, &amp;apos;r&amp;apos;) as f：
    print(f.read())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果文件很小，read()一次性读取很方便，如果不能确定文件大小，反复调用read(size)比较保险，如果是配置文件，调用readlines()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for line in f.readlines():
    print(line.strip())  #去掉末尾的&amp;apos;\n&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;file-like-Object&quot;&gt;&lt;a href=&quot;#file-like-Object&quot; class=&quot;headerlink&quot; title=&quot;file-like Object&quot;&gt;&lt;/a&gt;file-like Object&lt;/h2&gt;&lt;p&gt;像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。&lt;br&gt;StringIO就是在内存中创建的file-like Object&lt;/p&gt;
&lt;p&gt;##二进制文件&lt;br&gt;前面讲的就是读取文本文件，并且是UTF-8编码的文本文件，要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;/usr/michael/test.jpg&amp;apos;, &amp;apos;rb&amp;apos;)
f.read()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遇到有些编码不规范的文件，可能遇到UnicodeDecodeError异常，因为在文本文件中可以夹杂了一些非法编码的祖父，遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后该如何处理，最简单的方式就是直接忽略&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;/user/michael/gbk.txt&amp;apos;, &amp;apos;r&amp;apos;, encoding = &amp;apos;gbk&amp;apos;, errors = &amp;apos;ignore&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;写文件&quot;&gt;&lt;a href=&quot;#写文件&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;f = open(&amp;apos;/usr/michael/test.txt&amp;apos;, &amp;apos;w&amp;apos;)
f.write(&amp;apos;Hello World!&amp;apos;)
f.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&amp;apos;PATH&amp;apos;, &amp;apos;w&amp;apos;) as f:
    f.write(&amp;apos;Hello World!&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–IO&quot;&gt;&lt;a href=&quot;#Python–IO&quot; class=&quot;headerlink&quot; title=&quot;Python–IO&quot;&gt;&lt;/a&gt;Python–IO&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;f = open(
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL管理</title>
    <link href="http://yoursite.com/2016/09/05/MySQL%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2016/09/05/MySQL管理/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:49:16.487Z</updated>
    
    <content type="html">&lt;p&gt;@(MySQL)[MySQL]&lt;/p&gt;
&lt;h1 id=&quot;MySQL管理&quot;&gt;&lt;a href=&quot;#MySQL管理&quot; class=&quot;headerlink&quot; title=&quot;MySQL管理&quot;&gt;&lt;/a&gt;MySQL管理&lt;/h1&gt;&lt;p&gt;以root登录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加用户实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSERT INTO user (host, user, password, select_priv, insert_priv, update_priv), VALUES(&amp;apos;localhost&amp;apos;, &amp;apos;guest&amp;apos;, PASSWORD(&amp;apos;123456&amp;apos;), &amp;apos;Y&amp;apos;, &amp;apos;Y&amp;apos;, &amp;apos;Y&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新（在添加用户实例之后需要执行此语句重新载入授权表，如果不使用该命令，就无法使用新建的用户来连接mysql服务器，除非你重启mysql服务器）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看新添加的用户实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT host, user, password, FROM user WHERE user = &amp;apos;guest&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;管理MySQL的命令&quot;&gt;&lt;a href=&quot;#管理MySQL的命令&quot; class=&quot;headerlink&quot; title=&quot;管理MySQL的命令&quot;&gt;&lt;/a&gt;管理MySQL的命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;use 数据库名&lt;br&gt;选择要操作的MySQL数据库，使用该命令后MySQL命令都只针对该数据库。&lt;br&gt;&lt;img src=&quot;./1473043072290.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SHOW DATABASES;&lt;br&gt;列出MySQL数据库管理系统的数据库列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SHOW TABLES;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;SHOW COLUMNS FROM 数据表&lt;/li&gt;
&lt;li&gt;SHOW INDEX FROM 数据表&lt;br&gt;显示数据表的详细索引信息，包括PRIMARY KEY（主键）&lt;/li&gt;
&lt;li&gt;SHOW TABLE STATUS LIKE [FROM db_name] [LIKE ‘pattern’] \G&lt;br&gt;该命令将输出MySQL数据库管理系统的性能及统计信息&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(MySQL)[MySQL]&lt;/p&gt;
&lt;h1 id=&quot;MySQL管理&quot;&gt;&lt;a href=&quot;#MySQL管理&quot; class=&quot;headerlink&quot; title=&quot;MySQL管理&quot;&gt;&lt;/a&gt;MySQL管理&lt;/h1&gt;&lt;p&gt;以root登录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysq
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--进程</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E8%BF%9B%E7%A8%8B%20&%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/09/05/Python–进程 &线程/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:50:05.391Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–进程-amp-线程&quot;&gt;&lt;a href=&quot;#Python–进程-amp-线程&quot; class=&quot;headerlink&quot; title=&quot;Python–进程 &amp;amp;线程&quot;&gt;&lt;/a&gt;Python–进程 &amp;amp;线程&lt;/h1&gt;&lt;p&gt;本文简单谈论一下进程和线程&lt;br&gt;要实现多任务，我们通常会采用Master-Worker模式，Master负责分配任务，Worker负责执行任务，因此在多任务环境下，通常是一个Master，多个Worker。&lt;br&gt;如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker；如果多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。&lt;br&gt;多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了不会影响主进程和其他子进程；多线程模式的缺点是创建进程的代价大，在Unix/Linux可以简单的用fork调用，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统调度会成问题。&lt;br&gt;多线程模式比多进程快一点，但是快不到哪里去，而且多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个系统崩溃，因为所有线程共享进程的内存。在Windows上如果一个线程执行的代码出了问题，你经常可以看到类似于“非法操作”的提示，其实往往是某个线程出了问题，而操作系统会强制结束整个进程。&lt;br&gt;在Windows下，多线程的效率比多进程高。&lt;/p&gt;
&lt;h2 id=&quot;线程切换&quot;&gt;&lt;a href=&quot;#线程切换&quot; class=&quot;headerlink&quot; title=&quot;线程切换&quot;&gt;&lt;/a&gt;线程切换&lt;/h2&gt;&lt;p&gt;多任务如果多到了一个限度，就会消耗掉系统所有的资源，造成效率急剧下降。&lt;/p&gt;
&lt;h2 id=&quot;计算密集型-amp-IO密集型&quot;&gt;&lt;a href=&quot;#计算密集型-amp-IO密集型&quot; class=&quot;headerlink&quot; title=&quot;计算密集型&amp;amp;IO密集型&quot;&gt;&lt;/a&gt;计算密集型&amp;amp;IO密集型&lt;/h2&gt;&lt;p&gt;我们考虑是否采用多任务时，可以把任务分为计算密集型和IO密集型&lt;br&gt;计算密集型任务的特点是要进行大量的计算，消耗CPU的资源，这种计算密集型任务虽然可以用多任务完成，但是任务越多，华仔任务切换的时间就越多，CPU执行任务的效率就越低，所以要最高效的利用CPU的话，同时进行的数量应等于CPU的核心数。另外，计算密集型代码运行效率很重要，Python这样的脚本语言运行效率低，不适合做计算密集型任务，对于此类任务，最好用C语言编写。&lt;/p&gt;
&lt;p&gt;第二种是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的CPU消耗很少，任务大部分时间都在等待IO操作完成，对于IO密集型任务，任务越多CPU效率越高，但也有一个限度，常见的大部分任务都是IO密集型，例如WEB服务。&lt;/p&gt;
&lt;h2 id=&quot;异步IO&quot;&gt;&lt;a href=&quot;#异步IO&quot; class=&quot;headerlink&quot; title=&quot;异步IO&quot;&gt;&lt;/a&gt;异步IO&lt;/h2&gt;&lt;p&gt;考虑到CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此我们需要多进程模型或者多线程模型来支持多任务并发执行。&lt;br&gt;现代操作系统最大的特点就是支持异步IO。如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种模型称为事件驱动模型，Nginx就是支持异步IO的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。&lt;/p&gt;
&lt;p&gt;对应到Python，单进程的异步编程模型称为&lt;strong&gt;协程&lt;/strong&gt;，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–进程-amp-线程&quot;&gt;&lt;a href=&quot;#Python–进程-amp-线程&quot; class=&quot;headerlink&quot; title=&quot;Python–进程 &amp;amp;线程&quot;&gt;&lt;/a&gt;Python–进程 &amp;a
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--StringIO和BytesIO</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93StringIO%E5%92%8CBytesIO/"/>
    <id>http://yoursite.com/2016/09/05/Python–StringIO和BytesIO/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:51:10.151Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–StringIO和BytesIO&quot;&gt;&lt;a href=&quot;#Python–StringIO和BytesIO&quot; class=&quot;headerlink&quot; title=&quot;Python–StringIO和BytesIO&quot;&gt;&lt;/a&gt;Python–StringIO和BytesIO&lt;/h1&gt;&lt;h2 id=&quot;StringIO&quot;&gt;&lt;a href=&quot;#StringIO&quot; class=&quot;headerlink&quot; title=&quot;StringIO&quot;&gt;&lt;/a&gt;StringIO&lt;/h2&gt;&lt;p&gt;很多时候，数据读写不一定是文件，也可以在内存中读写&lt;br&gt;StringIO顾名思义就是再内存中读写str&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; io &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StringIO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = StringIO()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.write(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.write(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.write(&lt;span class=&quot;string&quot;&gt;&#39;world!&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.getvalue())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要读取StringIO，可以用一个str初始化StringIO，然后像读取文件一样读取&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; io &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StringIO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = StringIO(&lt;span class=&quot;string&quot;&gt;&#39;Hello!\nHi\nGoodBye&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = f.readline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s == &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(s.strip())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;BytesIO&quot;&gt;&lt;a href=&quot;#BytesIO&quot; class=&quot;headerlink&quot; title=&quot;BytesIO&quot;&gt;&lt;/a&gt;BytesIO&lt;/h2&gt;&lt;p&gt;要操作二进制数据需要使用BytesIO。&lt;br&gt;BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入bytes&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; io &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BytesIO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = BytesIO()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (f.write(&lt;span class=&quot;string&quot;&gt;&#39;中文&#39;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.getvalue())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–StringIO和BytesIO&quot;&gt;&lt;a href=&quot;#Python–StringIO和BytesIO&quot; class=&quot;headerlink&quot; title=&quot;Python–StringIO和Bytes
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--序列化</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2016/09/05/Python–序列化/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:50:45.784Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–序列化&quot;&gt;&lt;a href=&quot;#Python–序列化&quot; class=&quot;headerlink&quot; title=&quot;Python–序列化&quot;&gt;&lt;/a&gt;Python–序列化&lt;/h1&gt;&lt;h2 id=&quot;pickle&quot;&gt;&lt;a href=&quot;#pickle&quot; class=&quot;headerlink&quot; title=&quot;pickle&quot;&gt;&lt;/a&gt;pickle&lt;/h2&gt;&lt;p&gt;在程序运行中，所有的变量都是在内存中，我们随时可以修改这些变量，但是一旦程序结束，变量所占用的内存就会被操作系统全部回收，如果没有把修改后的变量存储到硬盘上，下次重新运行程序变量要么不存在，要么变为代码中定义的值。&lt;br&gt;我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。&lt;br&gt;序列化之后，就可以吧序列化后的内容写入磁盘，或者通过网络传输到别的机器上。&lt;br&gt;反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling&lt;br&gt;Python提供了pickle模块来实现序列化&lt;/p&gt;
&lt;p&gt;example&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import pickle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = dict(name = &amp;apos;tom&amp;apos;, age = 20, score = 88)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(pickle.dumps(d))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b&amp;apos;\x80\x03}q\x00(X\x05\x00\x00\x00scoreq\x01KXX\x04\x00\x00\x00nameq\x02X\x03\x00\x00\x00tomq\x03X\x03\x00\x00\x00ageq\x04K\x14u.&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pick.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件，或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import pickle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = dict(name = &amp;apos;tom&amp;apos;, age = 20, score = 88)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(&amp;apos;dump.txt&amp;apos;, &amp;apos;wb&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pickle.dump(d, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当我们要把对象从磁盘读到内存时，先把内容读到一个bytes，然后用pickle.load()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pickle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(&lt;span class=&quot;string&quot;&gt;&#39;dump.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = pickle.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(d)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用pickle反序列化出的数据只能用于Python，并且不同版本Python之间彼此都不兼容，因此只能用pickle保存那些不重要的数据。&lt;/p&gt;
&lt;h2 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h2&gt;&lt;p&gt;如果我们要在不同的编程语言之间传递对象，就必须把对象序列化成标准格式，比如xml，但是，更好的的方法是序列化为json，因为json表示出来的就是一个字符串，可以被所有语言读取，也可以方便的存储到磁盘或者通过网络传输，json不仅是标准格式，并且比xml更快，而且可以直接在Web页面读取。&lt;br&gt;json表示的对象就是标准的javascript语言的对象。&lt;br&gt;python内置的json模块提供了非常完善的Python对象到json格式的转换&lt;br&gt;&lt;img src=&quot;./1472916167945.png&quot; alt=&quot;json&quot;&gt;&lt;/p&gt;
&lt;p&gt;dumps方法返回一个str，内容就是标准的json，类似的，dump方法可以直接把json写入一个file-like Object&lt;br&gt;&lt;img src=&quot;./1472917049818.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Python的dict对象可以直接序列化为json的{}，不过很多时候更习惯用class表示对象，比如定义student类，然后序列化&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, age, score)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.score = score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;studentjson&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(std)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: std.name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;: std.age,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;score&#39;&lt;/span&gt;:std.score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = student(&lt;span class=&quot;string&quot;&gt;&#39;bob&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#print(json.dumps(s, default=studentjson))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(json.dumps(s, default=&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; obj: obj.__dict__))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有studentjson函数，编译器会返回一个TypeError异常，错误原因是student对象不是一个可以序列化为json的对象，我们观察dumps方法的参数列表，可以发现除了第一个必须的obj参数外，dumps方法还提供了很多可选参数，如果没有studentjson函数，dumps方法就不知道如何将student实例变为一个json的{}对象。&lt;br&gt;可选参数default就是把任意一个对象变成一个可以序列化为json的对象。我们需要为student专门写一个类似于studentjson的转换函数，也可以使用lambda代替。&lt;br&gt;为什么可以用lambda简化？因为通常class实例都有一个__dict__属性，它就是一个dict，用来存储实例变量，也有少数是例外的，不如定义了__slots__的class&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–序列化&quot;&gt;&lt;a href=&quot;#Python–序列化&quot; class=&quot;headerlink&quot; title=&quot;Python–序列化&quot;&gt;&lt;/a&gt;Python–序列化&lt;/h1&gt;&lt;h2 id=&quot;pickle&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--多进程</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/09/05/Python–多进程/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:50:24.912Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–多进程&quot;&gt;&lt;a href=&quot;#Python–多进程&quot; class=&quot;headerlink&quot; title=&quot;Python–多进程&quot;&gt;&lt;/a&gt;Python–多进程&lt;/h1&gt;&lt;p&gt;注：以下实验均在Linux平台上试验成功&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Process (%s) start...&#39;&lt;/span&gt; % os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid = os.fork()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pid == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;I am child process (%s) and my parent is %s&#39;&lt;/span&gt; % (os.getpid(), os.getppid()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;I (%s) just created a child process (%s).&#39;&lt;/span&gt; % (os.getpid(), pid))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果打算编写多进程的程序，Linux平台是最好的选择，Windows没有fork调用，但Python的multiprocessing模块提供了跨平台解决方案。&lt;br&gt;multiprocessing模块提供了一个Process类来代表一个进程对象&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run_proc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Run child process %s (%s)...&#39;&lt;/span&gt; % (name, os.getpid()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Parent process %s.&#39;&lt;/span&gt; % os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = Process(target=run_proc, args=(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Child process will start.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Child process end.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。&lt;/p&gt;
&lt;p&gt;##Pool&lt;br&gt;如果需要启动大量的子进程，可以用进程池的方法批量创建子进程&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os, time, random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;long_time_task&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Run task %s (%s)...&#39;&lt;/span&gt; % (name, os.getpid()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(random.random() * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Task %s runs %0.2f seconds.&#39;&lt;/span&gt; % (name, (end - start)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Parent process %s.&#39;&lt;/span&gt; % os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = Pool(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p.apply_async(long_time_task, args=(i,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Waiting for all subprocesses done...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;All subprocesses done.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()后就不能继续添加新的Process了。&lt;br&gt;本人的试验平台为虚拟机中的linux系统，为其分配了两个cpu核心&lt;br&gt;&lt;img src=&quot;./1472969500562.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;运行时可以看到task 0 1 2 3是立刻执行的，而task 4要等待一下才会执行，这是因为Pool的默认大小为4，因此最多执行4个进程，如果将代码修改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p = Pool(5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以同时跑5个进程，Pool的默认大小是CPU的核数，如果你的CPU有八个核心，你要至少提交9个子进程才能看到上述效果&lt;/p&gt;
&lt;p&gt;##子进程&lt;br&gt;subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; subprocess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;$ nslookup www.python.org&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = subprocess.call([&lt;span class=&quot;string&quot;&gt;&#39;nslookup&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;www.python.org&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Exit code:&#39;&lt;/span&gt;, r)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例子演示了如何在Python中运行命令 nslookup www.python.org&lt;/p&gt;
&lt;p&gt;如果子进程还需要输入，则可以通过communicate()方法输入&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; subprocess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;$ nslookup&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = subprocess.Popen([&lt;span class=&quot;string&quot;&gt;&#39;nslookup&#39;&lt;/span&gt;], stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output, err = p.communicate(&lt;span class=&quot;string&quot;&gt;b&#39;set q=mx\npython.org\mexit\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(output.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Exit code:&#39;&lt;/span&gt;, p.returncode)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码结果相当于在shell执行命令nslookup，然后手动输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set q=mx
python.org
exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##进程间通信&lt;br&gt;Process之间肯定是需要通信的，操作系统提供了很多机制来实习进程间的通信，Python的multiprocessing模块包装了底层的机制，提供了Queue和Pipes等多种方式来交换数据。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Process, Queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os, time, random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(q)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Process to write: %s&#39;&lt;/span&gt; % os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;Put %s to queue...&#39;&lt;/span&gt; % value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        q.put(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(random.random())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(q)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Process to read: %s&#39;&lt;/span&gt; % os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = q.get(&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;Get %s from queue.&#39;&lt;/span&gt; % value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q = Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw = Process(target=write, args=(q,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr = Process(target=read, args=(q,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr.terminate()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–多进程&quot;&gt;&lt;a href=&quot;#Python–多进程&quot; class=&quot;headerlink&quot; title=&quot;Python–多进程&quot;&gt;&lt;/a&gt;Python–多进程&lt;/h1&gt;&lt;p&gt;注：以下实验均在Linux
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--错误处理</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/09/05/Python–错误处理/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:52:19.999Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–错误处理&quot;&gt;&lt;a href=&quot;#Python–错误处理&quot; class=&quot;headerlink&quot; title=&quot;Python–错误处理&quot;&gt;&lt;/a&gt;Python–错误处理&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;: //认为某些代码可能会出错时，用&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;来运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;try...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;result: &#39;&lt;/span&gt;, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ZeroDivisionError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:  //出现错误时运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;except: &#39;&lt;/span&gt;, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:  //最后被执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;finally: &#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;END&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有错误发生，except不会被执行，但是finally如果有的话肯定会被执行。&lt;/p&gt;
&lt;p&gt;错误有多个种类，各种类型的错误，所以except语句块也有不同的类型。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;try...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; / int(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;) //int可能会抛出ValueError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;result:&#39;&lt;/span&gt;, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;ValueError:&#39;&lt;/span&gt;, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ZeroDivisionError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;ZeroDivisionError:&#39;&lt;/span&gt;, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;finally...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;END&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常见错误类型&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BaseException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; +-- SystemExit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; +-- KeyboardInterrupt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; +-- GeneratorExit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; +-- Exception&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- StopIteration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- StopAsyncIteration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- ArithmeticError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- FloatingPointError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- OverflowError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- ZeroDivisionError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- AssertionError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- AttributeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- BufferError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- EOFError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- ImportError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- LookupError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- IndexError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- KeyError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- MemoryError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- NameError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- UnboundLocalError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- OSError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- BlockingIOError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- ChildProcessError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- ConnectionError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    |    +-- BrokenPipeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    |    +-- ConnectionAbortedError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    |    +-- ConnectionRefusedError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    |    +-- ConnectionResetError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- FileExistsError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- FileNotFoundError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- InterruptedError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- IsADirectoryError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- NotADirectoryError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- PermissionError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- ProcessLookupError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- TimeoutError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- ReferenceError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- RuntimeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- NotImplementedError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- RecursionError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- SyntaxError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- IndentationError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |         +-- TabError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- SystemError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- TypeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- ValueError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |    +-- UnicodeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |         +-- UnicodeDecodeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |         +-- UnicodeEncodeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |         +-- UnicodeTranslateError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-- Warning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- DeprecationWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- PendingDeprecationWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- RuntimeWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- SyntaxWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- UserWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- FutureWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- ImportWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- UnicodeWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- BytesWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-- ResourceWarning&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;记录错误&quot;&gt;&lt;a href=&quot;#记录错误&quot; class=&quot;headerlink&quot; title=&quot;记录错误&quot;&gt;&lt;/a&gt;记录错误&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import logging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def foo(s):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 10 / int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def bar(s):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return foo(s) * 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def main():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bar(&amp;apos;0&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    except Exception as e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logging.exception(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;apos;END&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了，既然我们能捕获错误，就可以吧错误堆栈打印出来，然后分析错误原因，同时让程序继续执行下去。&lt;br&gt;&lt;img src=&quot;./1472726873619.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;同样是出错，但程序打印完错误信息后会继续执行，并正常退出&lt;/p&gt;
&lt;p&gt;通过配置，logging还可以把错误记录到&lt;strong&gt;日志文件&lt;/strong&gt;里。&lt;/p&gt;
&lt;h2 id=&quot;抛出错误&quot;&gt;&lt;a href=&quot;#抛出错误&quot; class=&quot;headerlink&quot; title=&quot;抛出错误&quot;&gt;&lt;/a&gt;抛出错误&lt;/h2&gt;&lt;p&gt;因为错误是class，捕获一个错误就是捕获到该class的一个实例，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class FooError(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def foo(s):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if n == 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		raise FooError(&amp;apos;invalid value: %s&amp;apos; % s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 10 / n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;apos;0&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行结果&lt;br&gt;&lt;img src=&quot;./1472727884713.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–错误处理&quot;&gt;&lt;a href=&quot;#Python–错误处理&quot; class=&quot;headerlink&quot; title=&quot;Python–错误处理&quot;&gt;&lt;/a&gt;Python–错误处理&lt;/h1&gt;&lt;figure clas
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--操作文件和目录</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2016/09/05/Python–操作文件和目录/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:51:57.728Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–操作文件和目录&quot;&gt;&lt;a href=&quot;#Python–操作文件和目录&quot; class=&quot;headerlink&quot; title=&quot;Python–操作文件和目录&quot;&gt;&lt;/a&gt;Python–操作文件和目录&lt;/h1&gt;&lt;p&gt;在Python中执行这些目录和文件需要调用os模块，os模块可以直接调用操作系统提供的接口函数&lt;/p&gt;
&lt;p&gt;查看操作系统类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
os.name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;./1472795231032.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是posix，说明系统是linux, unix, mac os，如果是nt，就是Windows系统&lt;/p&gt;
&lt;p&gt;要获取详细的系统信息，可以调用uname()&lt;br&gt;&lt;img src=&quot;./1472795392923.png&quot; alt=&quot;Windows&quot;&gt;&lt;br&gt;注意，uname函数在Windows上不提供&lt;br&gt;&lt;img src=&quot;./1472795445062.png&quot; alt=&quot;Linux&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境变量&quot;&gt;&lt;a href=&quot;#环境变量&quot; class=&quot;headerlink&quot; title=&quot;环境变量&quot;&gt;&lt;/a&gt;环境变量&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;./1472795504802.png&quot; alt=&quot;environ&quot;&gt;&lt;br&gt;要获取某个环境变量的值，可以调用os.environ.get(‘key’)&lt;br&gt;&lt;img src=&quot;./1472795572054.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作文件和目录&quot;&gt;&lt;a href=&quot;#操作文件和目录&quot; class=&quot;headerlink&quot; title=&quot;操作文件和目录&quot;&gt;&lt;/a&gt;操作文件和目录&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&amp;apos;.&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;C:\\Users\\Administrator&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在某个目录下创建一个新目录，首先把新目录的完整路径表示出来&lt;br&gt;os.path.join(‘/usr/abc’, ‘newfolder’)&lt;br&gt;创建一个目录&lt;br&gt;os.mkdir(‘/usr/abc/newfolder’)&lt;br&gt;删除一个目录&lt;br&gt;os.mkdir(‘/usr/abc/newfolder’)&lt;/p&gt;
&lt;p&gt;把两个路径合并成一个时，不要直接拼字符串，要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符&lt;/p&gt;
&lt;p&gt;同样的道理，要拆分路径是，不要直接去拆字符串，要通过os.path.split()函数，可以把一个路径拆成两部分，后一部分是最后一级的目录或文件名&lt;/p&gt;
&lt;p&gt;os.path.splitext()可以分离出文件的扩展名&lt;br&gt;&lt;img src=&quot;./1472799790613.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;对文件的重命名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;os.rename(&amp;apos;test.txt&amp;apos;, &amp;apos;test.py&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;os.remove(&amp;apos;test.py&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复制文件的函数在os模块中不存在，因为复制文件并非由操作系统提供的系统调用。&lt;br&gt;shutil模块提供了copyfile()函数&lt;/p&gt;
&lt;p&gt;example&lt;br&gt;过滤文件——列出当前目录下所有目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[x for x in os.listdir(&amp;apos;.&amp;apos;) if os.path.isdir(x)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过滤文件——列出所有的.py文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[x for x in os.listdir(&amp;apos;.&amp;apos;) if os.path.isfile(x) and os.path.splitext(x)[1] == &amp;apos;.py&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–操作文件和目录&quot;&gt;&lt;a href=&quot;#Python–操作文件和目录&quot; class=&quot;headerlink&quot; title=&quot;Python–操作文件和目录&quot;&gt;&lt;/a&gt;Python–操作文件和目录&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python--线程局部变量</title>
    <link href="http://yoursite.com/2016/09/05/Python%E2%80%93%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2016/09/05/Python–线程局部变量/</id>
    <published>2016-09-04T16:00:00.000Z</published>
    <updated>2016-09-05T08:49:37.832Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–线程局部变量&quot;&gt;&lt;a href=&quot;#Python–线程局部变量&quot; class=&quot;headerlink&quot; title=&quot;Python–线程局部变量&quot;&gt;&lt;/a&gt;Python–线程局部变量&lt;/h1&gt;&lt;p&gt;在多线程环境下，每个线程都有自己的数据，一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量的修改必须枷锁。&lt;br&gt;使用ThreadLocal可以自动做到&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local_school = threading.local()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process_student&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std = local_school.student&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Hello, %s (in %s)&#39;&lt;/span&gt; % (std, threading.current_thread().name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    local_school.student = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    process_student()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1 = threading.Thread(target=process_thread, args=(&lt;span class=&quot;string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;,), name=&lt;span class=&quot;string&quot;&gt;&#39;Thread-A&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t2 = threading.Thread(target=process_thread, args=(&lt;span class=&quot;string&quot;&gt;&#39;bbb&#39;&lt;/span&gt;,), name=&lt;span class=&quot;string&quot;&gt;&#39;Thread-B&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t2.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t2.join()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行结果&lt;br&gt;&lt;img src=&quot;./1473058042495.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。可以把local_school看作全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不同管理锁的问题，ThreadLocal的内部会处理。我们不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher。&lt;/p&gt;
&lt;p&gt;ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python–线程局部变量&quot;&gt;&lt;a href=&quot;#Python–线程局部变量&quot; class=&quot;headerlink&quot; title=&quot;Python–线程局部变量&quot;&gt;&lt;/a&gt;Python–线程局部变量&lt;/h1&gt;&lt;p&gt;在
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell——控制结构</title>
    <link href="http://yoursite.com/2016/09/02/Shell%E2%80%94%E2%80%94%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2016/09/02/Shell——控制结构/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T02:17:11.236Z</updated>
    
    <content type="html">&lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——控制结构&quot;&gt;&lt;a href=&quot;#Shell——控制结构&quot; class=&quot;headerlink&quot; title=&quot;Shell——控制结构&quot;&gt;&lt;/a&gt;Shell——控制结构&lt;/h1&gt;&lt;h2 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;example&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Is it morning? Please answer yes or no&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read timeofday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ $timeofday = &amp;quot;yes&amp;quot; ];then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Good morning&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Good afternoon&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;elif&quot;&gt;&lt;a href=&quot;#elif&quot; class=&quot;headerlink&quot; title=&quot;elif&quot;&gt;&lt;/a&gt;elif&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Is it morning? Please answer yes or no&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read timeofday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#attention the &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ &amp;quot;$timeofday&amp;quot; = &amp;quot;yes&amp;quot; ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Good morning&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elif [ &amp;quot;$timeofday&amp;quot; = &amp;quot;no&amp;quot; ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Good afternoon&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Sorry, $timeofday not recognized, enter yes or no &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	exit 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for variable in values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;while&quot;&gt;&lt;a href=&quot;#while&quot; class=&quot;headerlink&quot; title=&quot;while&quot;&gt;&lt;/a&gt;while&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Enter Password: &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while [ &amp;quot;$pwd&amp;quot; != &amp;quot;hello&amp;quot;]; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;Sorry, wrong password!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;until&quot;&gt;&lt;a href=&quot;#until&quot; class=&quot;headerlink&quot; title=&quot;until&quot;&gt;&lt;/a&gt;until&lt;/h2&gt;&lt;p&gt;until它与while循环很相似，只是把条件测试反过来了，换句话说，循环将反复执行知道条件为真，而不是在条件为真时反复执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;until who | grep &amp;quot;$1&amp;quot; &amp;gt; /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sleep 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#now ring the bell and announced the expected user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo -e &amp;apos;\a&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;**** $1 has just logged in ****&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;case&quot;&gt;&lt;a href=&quot;#case&quot; class=&quot;headerlink&quot; title=&quot;case&quot;&gt;&lt;/a&gt;case&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Is it morning? Please answer yes or no &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read timeofday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;$timeofday&amp;quot; in &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	yes | y | Yes | YES )	echo &amp;quot;Good morning&amp;quot;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n* | N* )				echo &amp;quot;Good afternoon&amp;quot;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	* )						echo &amp;quot;Sorry, answer yes or no&amp;quot;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;esac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Is it morning? Please answer yes or no &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read timeofday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;$timeofday&amp;quot; in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	yes | y | Y |YES )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		echo &amp;quot;Good morning&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		echo &amp;quot;the second line&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[nN]* )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		echo &amp;quot;Goood afternoon&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	* )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		echo &amp;quot;Sorry, answer not recognized&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		echo &amp;quot;Please answer yes or no&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;esac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;命令列表&quot;&gt;&lt;a href=&quot;#命令列表&quot; class=&quot;headerlink&quot; title=&quot;命令列表&quot;&gt;&lt;/a&gt;命令列表&lt;/h2&gt;&lt;h3 id=&quot;AND&quot;&gt;&lt;a href=&quot;#AND&quot; class=&quot;headerlink&quot; title=&quot;AND&quot;&gt;&lt;/a&gt;AND&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;statement1 &amp;amp;&amp;amp; statement2 &amp;amp;&amp;amp; statement3
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch file_one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -f file_two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ -f file_one ] &amp;amp;&amp;amp; echo &amp;quot;hello&amp;quot; &amp;amp;&amp;amp; [ -f file_two ] &amp;amp;&amp;amp; echo &amp;quot; there&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;in if&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;in else&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;OR&quot;&gt;&lt;a href=&quot;#OR&quot; class=&quot;headerlink&quot; title=&quot;OR&quot;&gt;&lt;/a&gt;OR&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;statement1 || statement2 || statement3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;语句块&quot;&gt;&lt;a href=&quot;#语句块&quot; class=&quot;headerlink&quot; title=&quot;语句块&quot;&gt;&lt;/a&gt;语句块&lt;/h3&gt;&lt;p&gt;如果你想在某些只允许使用单个语句的地方（比如在AND或OR列表中）使用多条语句，你可以把他们括在花括号｛｝中来构造一个语句块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;get_confirm &amp;amp;&amp;amp; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	grep -v &amp;quot;$cdcatnum&amp;quot; $tracks_file &amp;gt; $temp_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cat $temp_file &amp;gt; $tracks_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	add_record_tracks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——控制结构&quot;&gt;&lt;a href=&quot;#Shell——控制结构&quot; class=&quot;headerlink&quot; title=&quot;Shell——控制结构&quot;&gt;&lt;/a&gt;Shell——控制结构&lt;/h1&gt;&lt;h2 id=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>通过U盘安装VMware ESXi 6</title>
    <link href="http://yoursite.com/2016/09/02/%E9%80%9A%E8%BF%87U%E7%9B%98%E5%AE%89%E8%A3%85VMware%20ESXi%206/"/>
    <id>http://yoursite.com/2016/09/02/通过U盘安装VMware ESXi 6/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T02:15:13.500Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[VM]&lt;/p&gt;
&lt;h1 id=&quot;通过U盘安装VMware-ESXi-6&quot;&gt;&lt;a href=&quot;#通过U盘安装VMware-ESXi-6&quot; class=&quot;headerlink&quot; title=&quot;通过U盘安装VMware ESXi 6&quot;&gt;&lt;/a&gt;通过U盘安装VMware ESXi 6&lt;/h1&gt;&lt;p&gt;实验室有一台配有32g内存的服务器，为使其能够物尽其用，准备在服务器上搭建虚拟化平台，初步选定了VMware ESXi 6。&lt;br&gt;最开始按照惯例，从VMware官网下载最新的ISO镜像，然后在本地使用win32diskimager刻录ISO，但此法制作的启动U盘尝试多次并不能引导系统，于是google了ESXi的安装U盘的制作方法，特此整理如下：&lt;/p&gt;
&lt;h2 id=&quot;前奏&quot;&gt;&lt;a href=&quot;#前奏&quot; class=&quot;headerlink&quot; title=&quot;前奏&quot;&gt;&lt;/a&gt;前奏&lt;/h2&gt;&lt;p&gt;官方文档指明需要在Linux操作系统下制作安装U盘，并且系统内需要安装syslinux软件包和dosfstools软件包，两个软件包均可使用yum来安装，安装好后进入安装U盘的制作步骤&lt;/p&gt;
&lt;h2 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1&quot;&gt;&lt;/a&gt;step1&lt;/h2&gt;&lt;p&gt;插入U盘，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail -f /var/log/message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看当前的日志信息，可以看到以下类似的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sep 25 13:25:23 linux kernel:[  712.447080] sd 3:0:0:0:[sdb] Attached SCSI removable disk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在示例中，可以看到U盘用sdb加以标注，如果你的电脑中有多个存储设备，U盘的代号也可能是sdc之类的。&lt;/p&gt;
&lt;h2 id=&quot;step2&quot;&gt;&lt;a href=&quot;#step2&quot; class=&quot;headerlink&quot; title=&quot;step2&quot;&gt;&lt;/a&gt;step2&lt;/h2&gt;&lt;p&gt;在U盘上建立分区表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fdisk /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;输入【d】删除已存在的分区&lt;/li&gt;
&lt;li&gt;输入【n】将整个U盘创建为一个主分区&lt;/li&gt;
&lt;li&gt;输入【t】将硬盘分区设置为FAT32，选择c&lt;/li&gt;
&lt;li&gt;输入【a】在分区1上设置活动标记&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入【p】打印分区表，结果类似如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Disk /dev/sdb:2004 MB, 2004877312 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255 heads, 63 sectors/track, 243 cylinders&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Units = cylinders of 16065 * 512 = 8225280 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Device Boot      Start         End      Blocks   Id  System&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sdb1             1           243      1951866  c   W95 FAT32 (LBA)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入【w】保存并退出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;step3&quot;&gt;&lt;a href=&quot;#step3&quot; class=&quot;headerlink&quot; title=&quot;step3&quot;&gt;&lt;/a&gt;step3&lt;/h2&gt;&lt;p&gt;使用FAT32格式格式化U盘&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkfs.vfat -F 32 -n USB /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step4&quot;&gt;&lt;a href=&quot;#step4&quot; class=&quot;headerlink&quot; title=&quot;step4&quot;&gt;&lt;/a&gt;step4&lt;/h2&gt;&lt;p&gt;运行下列命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;syslinux /dev/sdb1
cat /usr/share/syslinux/mbr.bin &amp;gt; /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step5&quot;&gt;&lt;a href=&quot;#step5&quot; class=&quot;headerlink&quot; title=&quot;step5&quot;&gt;&lt;/a&gt;step5&lt;/h2&gt;&lt;p&gt;挂载U盘&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /mnt/usbflash
mount /dev/sdb1 /mnt/usbflash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step6&quot;&gt;&lt;a href=&quot;#step6&quot; class=&quot;headerlink&quot; title=&quot;step6&quot;&gt;&lt;/a&gt;step6&lt;/h2&gt;&lt;p&gt;挂载ESXi安装镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /mnt/esxi_cdrom
mount -o loop VMware-VMvisor.iso /mnt/esxi_cdrom
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step7&quot;&gt;&lt;a href=&quot;#step7&quot; class=&quot;headerlink&quot; title=&quot;step7&quot;&gt;&lt;/a&gt;step7&lt;/h2&gt;&lt;p&gt;将ISO内容复制到/mnt/usbflash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp -r /mnt/esxi_cdrom/* /mnt/usbdisk
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step8&quot;&gt;&lt;a href=&quot;#step8&quot; class=&quot;headerlink&quot; title=&quot;step8&quot;&gt;&lt;/a&gt;step8&lt;/h2&gt;&lt;p&gt;将isolinux.cfg文件重命名为syslinux.cfg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv /mnt/usbflash/isolinux.cfg /usbdisk/syslinux.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step9&quot;&gt;&lt;a href=&quot;#step9&quot; class=&quot;headerlink&quot; title=&quot;step9&quot;&gt;&lt;/a&gt;step9&lt;/h2&gt;&lt;p&gt;在/mnt/usbflash/syslinux.cfg文件中，将APPEND -c boot.cfg 修改为 APPEND -c boot.cfg -p 1&lt;/p&gt;
&lt;h2 id=&quot;step10&quot;&gt;&lt;a href=&quot;#step10&quot; class=&quot;headerlink&quot; title=&quot;step10&quot;&gt;&lt;/a&gt;step10&lt;/h2&gt;&lt;p&gt;将Linux系统中的syslinux下的menu.c32文件复制到/mnt/usbflash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /usr/share/syslinux/menu.c32 /mnt/usbflash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step11&quot;&gt;&lt;a href=&quot;#step11&quot; class=&quot;headerlink&quot; title=&quot;step11&quot;&gt;&lt;/a&gt;step11&lt;/h2&gt;&lt;p&gt;卸载U盘和ISO镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;umount /usbdisk
umount /esxi_cdrom
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[VM]&lt;/p&gt;
&lt;h1 id=&quot;通过U盘安装VMware-ESXi-6&quot;&gt;&lt;a href=&quot;#通过U盘安装VMware-ESXi-6&quot; class=&quot;headerlink&quot; title=&quot;通过U盘安装VMware ESXi 6&quot;&gt;&lt;/a&gt;通过U盘安装V
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell——变量</title>
    <link href="http://yoursite.com/2016/09/02/Shell%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2016/09/02/Shell——变量/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T02:17:28.876Z</updated>
    
    <content type="html">&lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——变量&quot;&gt;&lt;a href=&quot;#Shell——变量&quot; class=&quot;headerlink&quot; title=&quot;Shell——变量&quot;&gt;&lt;/a&gt;Shell——变量&lt;/h1&gt;&lt;p&gt;example：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myvar=&lt;span class=&quot;string&quot;&gt;&quot;Hi there&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$myvar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$myvar&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;$myvar&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; \&lt;span class=&quot;variable&quot;&gt;$myvar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Enter some text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; myvar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;$myvar&#39;&lt;/span&gt; now equals &lt;span class=&quot;variable&quot;&gt;$myvar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;环境变量：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$HOME   当前用户家目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$PATH   以冒号分隔的用来搜索命令的目录列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$0      shell脚本的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$#      传递给脚本的参数个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$      shell脚本的pid，脚本程序通常会生成一个唯一的临时文件，如/tmp/tmpfile_$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数变量：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$1, $2...   脚本程序的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$*          在一个变量中列出所有的参数，各个参数之间利用环境变量IFS中的第一个字符分隔开，如果IFS被修改了，那么$*将命令行分割为参数的方式就随之改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$@          他是$*的一种精巧的变体，它不使用IFS环境变量，即使IFS为空，参数也不会挤在一起&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——变量&quot;&gt;&lt;a href=&quot;#Shell——变量&quot; class=&quot;headerlink&quot; title=&quot;Shell——变量&quot;&gt;&lt;/a&gt;Shell——变量&lt;/h1&gt;&lt;p&gt;example：&lt;br&gt;&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell——函数</title>
    <link href="http://yoursite.com/2016/09/02/Shell%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/09/02/Shell——函数/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T02:14:00.220Z</updated>
    
    <content type="html">&lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——函数&quot;&gt;&lt;a href=&quot;#Shell——函数&quot; class=&quot;headerlink&quot; title=&quot;Shell——函数&quot;&gt;&lt;/a&gt;Shell——函数&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function_name () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;a simple function example&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yes_or_no() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echo &amp;quot;Is your name $* ?&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                echo -n &amp;quot;Enter yes or no&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                read x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case &amp;quot;$x&amp;quot; in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        y | yes )       return 0;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        n | no )        return 1;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        * )             echo &amp;quot;Answer yes or no please!&amp;quot;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                esac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;Original parameters are $*&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if yes_or_no &amp;quot;$1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echo &amp;quot;Hi $1, nice time&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echo &amp;quot;Never mind&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Linux程序设计)[Shell编程]&lt;/p&gt;
&lt;h1 id=&quot;Shell——函数&quot;&gt;&lt;a href=&quot;#Shell——函数&quot; class=&quot;headerlink&quot; title=&quot;Shell——函数&quot;&gt;&lt;/a&gt;Shell——函数&lt;/h1&gt;&lt;figure class=&quot;h
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Python之函数参数</title>
    <link href="http://yoursite.com/2016/09/02/Python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2016/09/02/Python之函数参数/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-09-02T02:16:05.700Z</updated>
    
    <content type="html">&lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python之函数参数&quot;&gt;&lt;a href=&quot;#Python之函数参数&quot; class=&quot;headerlink&quot; title=&quot;Python之函数参数&quot;&gt;&lt;/a&gt;Python之函数参数&lt;/h1&gt;&lt;h2 id=&quot;任意数量参数的函数构造&quot;&gt;&lt;a href=&quot;#任意数量参数的函数构造&quot; class=&quot;headerlink&quot; title=&quot;任意数量参数的函数构造&quot;&gt;&lt;/a&gt;任意数量参数的函数构造&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def anyargs(*args, **kwargs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(args) # A tuple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(kwargs) # A dict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用这个函数时，所有位置参数会被放到args元组中，所有关键字参数会被放到字典kwargs中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个*参数只能出现在函数定义中最后一个位置参数后面，而 **参数只能出现在最后一个参数。 有一点要注意的是，在*参数后面仍然可以定义其他参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def a(x, *args, y):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def b(x, *args, y, **kwargs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这种参数就是我们所说的强制关键字参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def make_element(name, value, **attrs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keyvals = [&amp;apos;%s = &amp;quot;%s&amp;quot;&amp;apos; % item for item in attrs.items()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attr_str = &amp;apos;&amp;apos;.join(keyvals)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element = &amp;apos;&amp;lt;&amp;#123;name&amp;#125; &amp;#123;attrs&amp;#125;&amp;gt;&amp;#123;value&amp;#125;&amp;lt;/&amp;#123;name&amp;#125;&amp;gt;&amp;apos;.format(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        attrs = attr_str,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = html.escape(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(make_element(&amp;apos;item&amp;apos;, &amp;apos;Albatross&amp;apos;, size = &amp;apos;large&amp;apos;, quantity = 6))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(make_element(&amp;apos;p&amp;apos;, &amp;apos;&amp;lt;spam&amp;gt;&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;返回多个值的函数&quot;&gt;&lt;a href=&quot;#返回多个值的函数&quot; class=&quot;headerlink&quot; title=&quot;返回多个值的函数&quot;&gt;&lt;/a&gt;返回多个值的函数&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def myfun():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; #返回一个元组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... return 1, 2, 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b, c = myfun()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;定义函数的默认参数&quot;&gt;&lt;a href=&quot;#定义函数的默认参数&quot; class=&quot;headerlink&quot; title=&quot;定义函数的默认参数&quot;&gt;&lt;/a&gt;定义函数的默认参数&lt;/h2&gt;&lt;p&gt;函数的默认参数的值仅仅在函数定义的时候赋值一次，之后若通过变量改变默认参数的值则仍沿用之前的值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def function(a, b = 23):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function(1) #a = 1, b = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function(1, 2) #a = 1, b = 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果默认参数是一个可修改的容器，比如一个列表、一个字典或者集合，可以使用None作为默认值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def function(a, b = None):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if b is None:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你不想提供一个默认值，只是想检查一下是否有参数传进来，则可以：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_no_value = object()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def function(a, b = _no_value):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if b is _no_value:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;apos;No b value supplied&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在测试None值时使用 is 操作符是很重要的，也是这种方案的关键点。 有时候大家会犯下下面这样的错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def spam(a, b=None):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if not b: # NO! Use &amp;apos;b is None&amp;apos; instead&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这么写的问题在于尽管None值确实是被当成False， 但是还有其他的对象(比如长度为0的字符串、列表、元组、字典等)都会被当做False。 因此，上面的代码会误将一些其他输入也当成是没有输入。比如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; spam(1) # OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; spam(1, x) # Silent error. x value overwritten by default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; spam(1, 0) # Silent error. 0 ignored&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; spam(1, &amp;apos;&amp;apos;) # Silent error. &amp;apos;&amp;apos; ignored&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;关于object&quot;&gt;&lt;a href=&quot;#关于object&quot; class=&quot;headerlink&quot; title=&quot;关于object()&quot;&gt;&lt;/a&gt;关于object()&lt;/h3&gt;&lt;p&gt;object()是python中所有类的基类，你可以创建object类的实例，但是这些实例没什么实际用处，因为它斌没有任何有用的方法，也没有任何实例数据，唯一能做的就是测试同一性。&lt;/p&gt;
&lt;h2 id=&quot;lambda&quot;&gt;&lt;a href=&quot;#lambda&quot; class=&quot;headerlink&quot; title=&quot;lambda&quot;&gt;&lt;/a&gt;lambda&lt;/h2&gt;&lt;p&gt;当一些函数表达式很简单、仅需要计算一个表达式的时候，可以使用lambda表达式来代替：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;add = lambda x, y: x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(add(2, 3))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(add(&amp;apos;hello&amp;apos;, &amp;apos;world&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码的效果和下面代码的效果相同：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def add(x, y):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(add(2, 3))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(add(&amp;apos;hello&amp;apos;, &amp;apos;world&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;lambda表达式典型的使用场景是排序或数据reduce&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;names = [&amp;apos;David Beazley&amp;apos;, &amp;apos;Brian Jones&amp;apos;, &amp;apos;Raymond Hettinger&amp;apos;, &amp;apos;Ned Batchelder&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sorted(names, key = lambda name: name.split( )[-1].lower())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(Python)[Python]&lt;/p&gt;
&lt;h1 id=&quot;Python之函数参数&quot;&gt;&lt;a href=&quot;#Python之函数参数&quot; class=&quot;headerlink&quot; title=&quot;Python之函数参数&quot;&gt;&lt;/a&gt;Python之函数参数&lt;/h1&gt;&lt;h2 id=&quot;任意数量
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>一个科学上网方案（基于ShadowsocksR）</title>
    <link href="http://yoursite.com/2016/06/19/%E4%B8%80%E4%B8%AA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E6%A1%88%EF%BC%88%E5%9F%BA%E4%BA%8EShadowsocksR%EF%BC%89/"/>
    <id>http://yoursite.com/2016/06/19/一个科学上网方案（基于ShadowsocksR）/</id>
    <published>2016-06-18T16:00:00.000Z</published>
    <updated>2016-06-19T11:00:47.197Z</updated>
    
    <content type="html">&lt;p&gt;@(我的第一个笔记本)[Freedom]&lt;/p&gt;
&lt;h1 id=&quot;一个科学上网方案（基于ShadowsocksR）&quot;&gt;&lt;a href=&quot;#一个科学上网方案（基于ShadowsocksR）&quot; class=&quot;headerlink&quot; title=&quot;一个科学上网方案（基于ShadowsocksR）&quot;&gt;&lt;/a&gt;一个科学上网方案（基于ShadowsocksR）&lt;/h1&gt;&lt;p&gt;shadowsocks是一个极富盛名的基于socks5技术的代理软件，可用于突破防火墙的限制，ShadowsocksR相较于Shadowsocks加入了协议和混淆，进一步的将科学上网的流量伪装为正常流量，欺骗防火墙的相关内容检测，避免GFW的干扰和非正常流量的限速，很大程度上能够改善科学上网的使用体验。&lt;br&gt;&lt;a href=&quot;https://www.91yun.org/archives/1860&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSR与SS速度比较&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器操作系统：Ubuntu 14.04 Server&lt;/li&gt;
&lt;li&gt;服务器归属地：Singapore&lt;/li&gt;
&lt;li&gt;代理软件类型：ShadowsocksR&lt;/li&gt;
&lt;li&gt;辅助软件：ServerSpeeder&lt;h2 id=&quot;软件安装均必须在root下安装&quot;&gt;&lt;a href=&quot;#软件安装均必须在root下安装&quot; class=&quot;headerlink&quot; title=&quot;软件安装均必须在root下安装&quot;&gt;&lt;/a&gt;软件安装均必须在root下安装&lt;/h2&gt;&lt;h3 id=&quot;锐速-（serverspeeder）&quot;&gt;&lt;a href=&quot;#锐速-（serverspeeder）&quot; class=&quot;headerlink&quot; title=&quot;锐速 （serverspeeder）&quot;&gt;&lt;/a&gt;锐速 （serverspeeder）&lt;/h3&gt;锐速是一个网络加速软件，能够显著改善高延迟和丢包率高地区的网络质量，但相对应的服务器使用流量会有一定的增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装锐速&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;amp;&amp;amp; bash serverspeeder-all.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;卸载锐速&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chattr -i /serverspeeder/etc/apx* &amp;amp;&amp;amp; /serverspeeder/bin/serverSpeeder.sh uninstall &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装shadowsocksR（一键安装包）&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x shadowsocksR.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./shadowsocksR.sh 2&amp;gt;&amp;amp;1 | tee shadowsocksR.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件路径：/etc/shadowsocks.json&lt;br&gt;日志文件路径：/etc/log/shadowsocks.log&lt;/p&gt;
&lt;h3 id=&quot;单用户配置：&quot;&gt;&lt;a href=&quot;#单用户配置：&quot; class=&quot;headerlink&quot; title=&quot;单用户配置：&quot;&gt;&lt;/a&gt;单用户配置：&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;server&quot;: &quot;0.0.0.0&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;server_ipv6&quot;: &quot;::&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;server_port&quot;: 443,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;local_address&quot;: &quot;127.0.0.1&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;local_port&quot;: 1080,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;password&quot;: &quot;mypassword&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;timeout&quot;: 120,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;method&quot;: &quot;chacha20&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;,  //伪装协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;protocol_param&quot;: &quot;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;,  //混淆方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;obfs_param&quot;: &quot;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;redirect&quot;: &quot;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;dns_ipv6&quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;fast_open&quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;workers&quot;: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多用户配置（多端口多密码）&quot;&gt;&lt;a href=&quot;#多用户配置（多端口多密码）&quot; class=&quot;headerlink&quot; title=&quot;多用户配置（多端口多密码）&quot;&gt;&lt;/a&gt;多用户配置（多端口多密码）&lt;/h3&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;server_ipv6&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;[::]&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;local_address&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1080&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;port_password&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;80&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;password1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;443&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;password2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;auth_sha1_compatible&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;protocol_param&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;obfs&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http_simple_compatible&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;obfs_param&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;redirect&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;dns_ipv6&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;workers&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用效果&quot;&gt;&lt;a href=&quot;#使用效果&quot; class=&quot;headerlink&quot; title=&quot;使用效果&quot;&gt;&lt;/a&gt;使用效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/1466333580912.png&quot; alt=&quot;Ping test&quot;&gt;&lt;br&gt;新加坡服务器针对大陆有专线，这个时段延迟不高（高的时候200+）&lt;br&gt;&lt;img src=&quot;/images/1466333663303.png&quot; alt=&quot;youtube test&quot;&gt;&lt;br&gt;本人用的学校12M宽带，可见基本能把带宽跑满&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(我的第一个笔记本)[Freedom]&lt;/p&gt;
&lt;h1 id=&quot;一个科学上网方案（基于ShadowsocksR）&quot;&gt;&lt;a href=&quot;#一个科学上网方案（基于ShadowsocksR）&quot; class=&quot;headerlink&quot; title=&quot;一个科学上网方案（基于Shado
    
    </summary>
    
      <category term="NETWORK" scheme="http://yoursite.com/categories/NETWORK/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7下配置VNC曲折之路(续集)</title>
    <link href="http://yoursite.com/2016/05/30/CentOS7%E4%B8%8B%E9%85%8D%E7%BD%AEVNC%E6%9B%B2%E6%8A%98%E4%B9%8B%E8%B7%AF%EF%BC%88%E7%BB%AD%E9%9B%86%EF%BC%89/"/>
    <id>http://yoursite.com/2016/05/30/CentOS7下配置VNC曲折之路（续集）/</id>
    <published>2016-05-29T16:00:00.000Z</published>
    <updated>2016-05-30T10:44:38.253Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[CentOS|运维]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路（续集）&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;/a&gt;CentOS7下配置VNC曲折之路（续集）&lt;/h1&gt;&lt;p&gt;继续昨天的文，因为项目要使用的业务软件为oracle系列，这些商业软件安全性相对较好，其中一点就是只能使用低权限账号进行软件管理操作，在使用之前的教程配置好vnc后，我们只能启动root账户的vnc服务，添加其他的低权限账户的服务后启动时会报错，报错行和代码和昨天的一样，本来想着进了root账户后使用su - USER的方法来切换用户后安装相应的软件，结果使用此方法的话程序连安装检查都过不了，因为程序不能调用图形界面。然后我便试着注销root账户，但是在vnc下点击注销按钮后无任何反应，即使在登陆界面也无法点击按钮切换到其他的用户，试了几次过后只好作罢。&lt;br&gt;然后又开始了漫长的google之路，偶然间发现了一篇digitalocean里的一篇文章，链接如下&lt;br&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-remote-access-for-the-gnome-desktop-on-centos-7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-remote-access-for-the-gnome-desktop-on-centos-7&lt;/a&gt;&lt;br&gt;这篇文章介绍了CentOS7平台上的vnc服务搭建方法，较之前的文章个人感觉更为详细，对比它的操作步骤，关闭掉开启的vnc服务后，复制一份配置文件，端口号取3（之前的那个为2）切换到普通管理员账户下，运行vncserver，进行密码配置，重载systemd，启动服务，然后发现2号服务（root）无法启动，然后普通用户可以启动了，这个结果简直惊喜，马上联系甲方管理员添加端口，连接vnc服务，接下来的事都是顺水推舟了。&lt;br&gt;这个问题到底是什么原因还不清楚，但终究配置好了vnc服务，也顺利的安装好了业务软件，总算没有拖慢项目进度。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[CentOS|运维]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路（续集）&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路（续集）&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路（续集）
    
    </summary>
    
      <category term="LINUX" scheme="http://yoursite.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>Weblogic内存配置</title>
    <link href="http://yoursite.com/2016/05/30/Weblogic%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/05/30/Weblogic内存配置/</id>
    <published>2016-05-29T16:00:00.000Z</published>
    <updated>2016-05-30T11:05:15.942Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;Weblogic内存配置&quot;&gt;&lt;a href=&quot;#Weblogic内存配置&quot; class=&quot;headerlink&quot; title=&quot;Weblogic内存配置&quot;&gt;&lt;/a&gt;Weblogic内存配置&lt;/h1&gt;&lt;p&gt;每个weblogic server都是运行在一个java虚拟机上，对weblogic的内存设置也就是对java虚拟机的内存设置，很多时候在配置域后需要手动调整内存值，在良好的配置前提下，如果内存分配少了，后果都懂。。&lt;/p&gt;
&lt;p&gt;MEM_ARGS=-Xms512m -Xmx1024m -XX:MaxPermSize=128m&lt;/p&gt;
&lt;p&gt;-Xms512m表示jvm内存下限为512m &lt;/p&gt;
&lt;p&gt;-Xmx512m表示jvm内存上限为1024m &lt;/p&gt;
&lt;p&gt;-XX:MaxPermSize=128m表示永久内存为128m&lt;br&gt;使用vi打开/setDomainEnv.sh文件 &lt;/p&gt;
&lt;p&gt;默认的内存配置为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;JAVA_VENDOR&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Sun&quot;&lt;/span&gt; ] ; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_64BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms256m -Xmx512m&quot;&lt;/span&gt;　　//64位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_64BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_32BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms256m -Xmx512m&quot;&lt;/span&gt;　　//32位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_32BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_64BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx512m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_64BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_32BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx512m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_32BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#增加内存大小后：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;JAVA_VENDOR&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Sun&quot;&lt;/span&gt; ] ; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_64BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx1024m&quot;&lt;/span&gt;　　//64位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_64BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_32BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx1024m&quot;&lt;/span&gt;　　//32位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_32BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_64BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx1024m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_64BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　WLS_MEM_ARGS_32BIT=&lt;span class=&quot;string&quot;&gt;&quot;-Xms512m -Xmx1024m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WLS_MEM_ARGS_32BIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改后保存退出，重启Weblogic，完事儿。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;Weblogic内存配置&quot;&gt;&lt;a href=&quot;#Weblogic内存配置&quot; class=&quot;headerlink&quot; title=&quot;Weblogic内存配置&quot;&gt;&lt;/a&gt;Weblogic内存配置&lt;/h1&gt;&lt;p&gt;每
    
    </summary>
    
      <category term="LINUX" scheme="http://yoursite.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7下配置VNC曲折之路</title>
    <link href="http://yoursite.com/2016/05/29/CentOS7%E4%B8%8B%E9%85%8D%E7%BD%AEVNC%E6%9B%B2%E6%8A%98%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2016/05/29/CentOS7下配置VNC曲折之路/</id>
    <published>2016-05-28T16:00:00.000Z</published>
    <updated>2016-05-29T12:17:52.783Z</updated>
    
    <content type="html">&lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;/a&gt;CentOS7下配置VNC曲折之路&lt;/h1&gt;&lt;p&gt;最近项目第一期工程即将完工，准备部署到甲方的服务器上进行测试工作，部署的时候自然会牵涉到各类业务软件的部署，这个项目选择了weblogic和oracle数据库，由于平时配置此类业务软件均是使用图形界面下配置，对命令行下静默安装没有经验，恰逢甲方提供的是一个最小化安装的centos7服务器，所以接手的第一件事自然是装上x window system和vnc服务以方便远程配置。&lt;br&gt;接手后花了半分钟时间google了一下vnc服务的配置文档&lt;br&gt;&lt;a href=&quot;http://www.centoscn.com/image-text/install/2014/0829/3592.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.centoscn.com/image-text/install/2014/0829/3592.html&lt;/a&gt;&lt;br&gt;按照文档中的指示&lt;br&gt;yum check-update&lt;br&gt;yum install tigervnc-server tigervnc -y&lt;br&gt;CentOS7会自动搜索速度最快的软件源，自然一路顺风，不到一分钟就提示complete。&lt;br&gt;然后便是复制vnc配置文档到系统服务目录下（/etc/systemd/system），将配置文档更名为vncserver@:1.service。使用vi打开后，遵循文档中的帮助，将\&lt;user\&gt;修改为用vnc连接账户名，然后保存。&lt;br&gt;&lt;img src=&quot;/images/1464512594060.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/user\&gt;&lt;/p&gt;
&lt;p&gt;再重新加载一下systemd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使其能够随开机启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后启动服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就蒙蔽了。。&lt;br&gt;&lt;img src=&quot;/images/1464513611541.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;好吧。。然后看一下报错信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status vncserver@:1.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志显示&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# systemctl status vncserver@:1.service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?.vncserver@:1.service - Remote desktop service (VNC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; disabled; vendor preset: disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Active: failed (Result: &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;-code) since Sun 2016-05-29 17:20:00 CST; 4min 50s ago&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Process: 8164 ExecStart=/usr/sbin/runuser &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; root -c /usr/bin/vncserver %i (code=exited, status=1/FAILURE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Process: 8160 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || : (code=exited, status=0/SUCCESS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Main PID: 8104 (code=exited, status=1/FAILURE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:19:59 localhost.localdomain systemd[1]: Starting Remote desktop s...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: vncserver@:1.service: con...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: Failed to start Remote de...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: Unit vncserver@:1.service...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;May 29 17:20:00 localhost.localdomain systemd[1]: vncserver@:1.service failed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hint: Some lines were ellipsized, use &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; to show &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; full.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这尼玛就尴尬了，反复试了几次后决定google一下，心里想着自己肯定不是个例。。&lt;/p&gt;
&lt;p&gt;然后找到一篇csdn上的文章（链接忘了），说是把配置文档里的type类型由forking改为simple，于是照着这样改了之后，重复以上操作，错误信息是没有了，然后使用netstat查看端口，但预想的端口并没有被打开&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# systemctl start vncserver@:1.service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost system]&lt;span class=&quot;comment&quot;&gt;# netstat -ntlp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Active Internet connections (only servers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      10258/rpcbind       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1669/sshd           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2378/master         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:50080           0.0.0.0:*               LISTEN      10256/rpc.statd     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::111                  :::*                    LISTEN      10258/rpcbind       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::22                   :::*                    LISTEN      1669/sshd           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 ::1:25                  :::*                    LISTEN      2378/master         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::43559                :::*                    LISTEN      10256/rpc.statd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后查看一下状态。。依旧faild&lt;br&gt;这尼玛，没用啊，怎么办。。感觉把type改为simple就是掩耳盗铃，没什么卵用啊，于是我又开始了google之旅，其中centoscn上有一篇文档说是把USER改为root，这样就不会报错，但是我试过之后启动服务同样fail，这样一来二去实验排查仍未解决问题，我开始慌了。开始试着将vnc套件卸载掉，然后重装相关软件，将上面的步骤重复后仍然启动服务时显示fail。&lt;br&gt;这尼玛就尴尬了，下周就要开始测试了，结果被卡在vnc这一关了，弄得我很是焦灼。&lt;br&gt;过了一天，再次登上ssh服务器，将vnc相关软件卸载掉，再在google上逛逛有没有其他的安装文档能够参考，接下来就找到了一下两篇&lt;br&gt;&lt;a href=&quot;https://www.centos.org/forums/viewtopic.php?t=47713&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.centos.org/forums/viewtopic.php?t=47713&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://linux.cn/article-5335-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://linux.cn/article-5335-1.html&lt;/a&gt;&lt;br&gt;第一篇文章指的是可以把tmp目录下的.X11文件夹清空，同时我自己也为了图个吉利，把服务号改为了2，即vncserver@:2.service&lt;br&gt;第二篇文章则是一片最小安装环境下的一篇vnc配置文档，首先先安装x window system，再安装gnome相关套件，最后重启服务器&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum check-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum groupinstall &lt;span class=&quot;string&quot;&gt;&quot;X Window System&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，也有可能是软件源所提供的软件本身有问题，所以我将软件源换成了我日常使用的163镜像源后，再将上述两种方法结合实施后，再次启动服务，系统卡顿了两秒，好兆头，说不定能成，启动完毕后系统也没报错，敲入命令查看一下当前状态，状态终于成为了喜人的active&lt;br&gt;&lt;img src=&quot;/images/1464517607539.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;使用netstat查看监听端口，vnc的服务正常监听，vnc配置终获成功。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;对比两次操作之间的差异，可能是由于图形界面没有正确的被安装，当然也有可能服务号1不能使用，前者是因为之前操作云服务器的习惯，服务提供商一般都是提供了vnc管理接口，而操作云服务器也一直使用的命令行，没有使用过在GUI下配置相关服务（大陆外服务器VNC连接图形界面能慢死人），另外，之前自动匹配的软件源也有可能提供了有问题的软件（猜测），当然，安装图形界面后没有重启服务器也可能是原因之一。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;@(大二下项目笔记)[运维|CentOS]&lt;/p&gt;
&lt;h1 id=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;a href=&quot;#CentOS7下配置VNC曲折之路&quot; class=&quot;headerlink&quot; title=&quot;CentOS7下配置VNC曲折之路&quot;&gt;&lt;/a&gt;CentOS
    
    </summary>
    
      <category term="LINUX" scheme="http://yoursite.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>RHCSA 笔记</title>
    <link href="http://yoursite.com/2016/05/25/RHCSA%20Note/"/>
    <id>http://yoursite.com/2016/05/25/RHCSA Note/</id>
    <published>2016-05-25T01:36:35.000Z</published>
    <updated>2016-05-29T11:23:33.837Z</updated>
    
    <content type="html">&lt;p&gt;@(我的第一个笔记本)[Linux, RHCSA]&lt;/p&gt;
&lt;h1 id=&quot;RHCSA-Note&quot;&gt;&lt;a href=&quot;#RHCSA-Note&quot; class=&quot;headerlink&quot; title=&quot;RHCSA Note&quot;&gt;&lt;/a&gt;RHCSA Note&lt;/h1&gt;&lt;h2 id=&quot;输入输出重定向&quot;&gt;&lt;a href=&quot;#输入输出重定向&quot; class=&quot;headerlink&quot; title=&quot;输入输出重定向&quot;&gt;&lt;/a&gt;输入输出重定向&lt;/h2&gt;&lt;p&gt;重定向操作符可以用来将命令输入和输出数据流从默认位置重定向到其他位置，其输入输出数据流的位置称为&lt;strong&gt;句柄&lt;/strong&gt;，常见的句柄有三种，每种句柄有句柄、句柄代号、句柄描述三种属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STDIN    0    键盘输入&lt;/li&gt;
&lt;li&gt;STDOUT 1    输出信息到提示符窗口&lt;/li&gt;
&lt;li&gt;STDERR 2     输出错误信息到提示符窗口&lt;br&gt;默认的&amp;lt;重定向符号的句柄代号是0，&amp;gt;符号的句柄代号是1，输入&amp;lt;或&amp;gt;符号后必须制定数据的读写位置，可以使一个文件，也可以是其他句柄。&lt;br&gt;要指定重定向到现有句柄，请使用与（&amp;amp;）字符。后面接要重定向的句柄号&lt;br&gt;例如，将句柄号2重定向到句柄号1    2&amp;gt;&amp;amp;1&lt;br&gt;Linux重定向符功能描述&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;将命令输出写入文件或设备中，而不是命令提示符或句柄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt; 从文件而不是从键盘或句柄读入数据输入&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将输出写入文件末尾而不覆盖文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;amp; 将一个句柄的输出写到另一个句柄的输入之中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;amp; 从一个句柄中读取输入并将其写入到另一个句柄的输入中&lt;/li&gt;
&lt;li&gt;&lt;p&gt;| （意义你懂）&lt;br&gt;例如&lt;/p&gt;
&lt;p&gt;mysh &amp;gt; mylog.txt 2&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中2&amp;gt;&amp;amp;1的意思是将错误输出重定向到句柄1的标准输出，综合起来就是mysh命令执行过程中产生的标准输出和错误输出都会被重定向到mylog.txt中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysh &amp;gt; null 2&amp;gt; null
or
mysh &amp;gt; /dev/null 2&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;VNC-Connection&quot;&gt;&lt;a href=&quot;#VNC-Connection&quot; class=&quot;headerlink&quot; title=&quot;VNC Connection&quot;&gt;&lt;/a&gt;VNC Connection&lt;/h2&gt;&lt;p&gt;在装有gnomeGUI的centos系统上安装VNC SERVER&lt;br&gt;切换到root用户下，执行&lt;br&gt;yum install tigervnc-server -y&lt;br&gt;cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service&lt;br&gt;打开并编辑&lt;br&gt;[Service]&lt;br&gt;Type=forking&lt;br&gt;# Clean any existing files in /tmp/.X11-unix environment&lt;br&gt;ExecStartPre=/bin/sh -c ‘/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :’&lt;br&gt;ExecStart=/sbin/runuser -l USER-c “/usr/bin/vncserver %i”&lt;br&gt;PIDFile=/USER/.vnc/%H%i.pid&lt;br&gt;将其中的USER改成你的用户名&lt;br&gt;重启systemd&lt;br&gt;systemctl daemon-reload&lt;br&gt;退回到之前为VNC用户创建密码&lt;br&gt;vncpasswd&lt;br&gt;启用并启动服务&lt;br&gt;systemctl enable vncserver@:1.service&lt;br&gt;systemctl start vncserver@:1.service&lt;br&gt;允许vnc服务通过防火墙&lt;br&gt;firewall-cmd –permanent –add-service vnc-server&lt;br&gt;systemctl restart firewalld.service&lt;/p&gt;
&lt;h2 id=&quot;SSH-Connection&quot;&gt;&lt;a href=&quot;#SSH-Connection&quot; class=&quot;headerlink&quot; title=&quot;SSH Connection&quot;&gt;&lt;/a&gt;SSH Connection&lt;/h2&gt;&lt;p&gt;Linux下SSH登陆有两种途径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码登录&lt;/li&gt;
&lt;li&gt;密钥登陆&lt;br&gt;通常VPS或服务器开通后都是直接提供IP和root密码，使用这种方式就是通过密码方式登录。如果密码不够强壮，而且没有安装DenyHosts之类的防止SSH密码破解的软件，那么系统安全将存在很大的隐患。（PS:DenyHosts是针对SSH服务器的一个基于日志的入侵预防安全工具，是用Python编写的。其通过&lt;strong&gt;&lt;em&gt;监测身份验证登录日志中失败的登录尝试，屏蔽这些登录者的IP地址，&lt;/em&gt;&lt;/strong&gt;从而预防对SSH服务器的暴力破解。）&lt;br&gt;基于密钥的安全验证必须为用户自己创建一对密钥，并把共有的密钥放在需要访问的服务器上。当需要连接到SSH服务器上时，客户端软件就会向服务器发出请求，请求使用客户端的密钥进行安全验证。服务器收到请求之后，先在该用户的根目录下寻找共有密钥，然后把它和发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有的密钥加密“质询”，并把它发送给客户端软件（putty,xshell等）。客户端收到质询之后，就可以用本地的私人密钥解密再把它发送给服务器，这种方式是相当安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;生成密钥&quot;&gt;&lt;a href=&quot;#生成密钥&quot; class=&quot;headerlink&quot; title=&quot;生成密钥&quot;&gt;&lt;/a&gt;生成密钥&lt;/h3&gt;&lt;h4 id=&quot;在Linux服务器端生成密钥&quot;&gt;&lt;a href=&quot;#在Linux服务器端生成密钥&quot; class=&quot;headerlink&quot; title=&quot;在Linux服务器端生成密钥&quot;&gt;&lt;/a&gt;在Linux服务器端生成密钥&lt;/h4&gt;&lt;p&gt;执行ssh-keygem -t rsa&lt;/p&gt;
&lt;h4 id=&quot;使用xshell生成&quot;&gt;&lt;a href=&quot;#使用xshell生成&quot; class=&quot;headerlink&quot; title=&quot;使用xshell生成&quot;&gt;&lt;/a&gt;使用xshell生成&lt;/h4&gt;&lt;h2 id=&quot;grep与正则表达式&quot;&gt;&lt;a href=&quot;#grep与正则表达式&quot; class=&quot;headerlink&quot; title=&quot;grep与正则表达式&quot;&gt;&lt;/a&gt;grep与正则表达式&lt;/h2&gt;&lt;p&gt;grep -[acinv] ‘搜索内容串’ FILENAME&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a   以文本文件方式搜索&lt;/li&gt;
&lt;li&gt;-c   计算找到的符合行的次数&lt;/li&gt;
&lt;li&gt;-i   忽略大小写&lt;/li&gt;
&lt;li&gt;-n   顺便输出行号&lt;/li&gt;
&lt;li&gt;-v  反向选择，即找不符合指定条件的字符串行&lt;br&gt;&lt;strong&gt;其中搜索串可以是正则表达式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;压缩解压命令&quot;&gt;&lt;a href=&quot;#压缩解压命令&quot; class=&quot;headerlink&quot; title=&quot;压缩解压命令&quot;&gt;&lt;/a&gt;压缩解压命令&lt;/h2&gt;&lt;h3 id=&quot;tar命令：&quot;&gt;&lt;a href=&quot;#tar命令：&quot; class=&quot;headerlink&quot; title=&quot;tar命令：&quot;&gt;&lt;/a&gt;tar命令：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# tar -cf all.tar *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.jpg的文件打成一个名为all.tar的包，-c是产生新的包，-f制定包的文件名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -rf all.tar *.gif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.gif文件添加到all.tar的包里面去，-r表示增加文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -tf all.tar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;列出all.tar包里的文件，-t是列出文件的意思&lt;/p&gt;
&lt;p&gt;###tar调用gzip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -czf all.tar.gz *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将所有.jpg文件打成一个tar包，并且将其用gzip压缩，生成一个gzip压缩过的包，包名为all.tar.gz&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -xzf all.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将上面产生的包解开&lt;/p&gt;
&lt;p&gt;###tar调用bzip2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -cjf all.tar.bz2 *.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用-j命令调用bzip2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tar -xjf all.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解包&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对于.tar结尾的文件&lt;br&gt; tar -cf all.tar&lt;br&gt; tar -xf all.tar&lt;/li&gt;
&lt;li&gt;对于.gz结尾的文件&lt;br&gt; gzip -d all.gz&lt;br&gt; gunzip all.gz&lt;/li&gt;
&lt;li&gt;对于.tgz或.tar.gz文件&lt;br&gt; tar -xzf all.tar.gz&lt;br&gt; tar -xzf all.tgz&lt;/li&gt;
&lt;li&gt;对于.bz2结尾的文件&lt;br&gt; bzip2 -d all.bz2&lt;br&gt; bunzip2 all.bz2&lt;/li&gt;
&lt;li&gt;对于tar.bz2结尾的文件&lt;br&gt; tar -xjf all.tar.bz2&lt;/li&gt;
&lt;li&gt;对于.Z结尾的文件&lt;br&gt; uncompress all.Z&lt;/li&gt;
&lt;li&gt;对于.tar.Z结尾的文件&lt;br&gt; tar -xZf all.tar.Z&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;对于win平台常见的zip和rar文件&quot;&gt;&lt;a href=&quot;#对于win平台常见的zip和rar文件&quot; class=&quot;headerlink&quot; title=&quot;对于win平台常见的zip和rar文件&quot;&gt;&lt;/a&gt;对于win平台常见的zip和rar文件&lt;/h3&gt;&lt;p&gt;zip all.zip *.jpg&lt;/p&gt;
&lt;p&gt;unzip all.zip&lt;/p&gt;
&lt;p&gt;在linux下处理.rar文件，需要安装RAR for Linux&lt;/p&gt;
&lt;p&gt;tar -xzpvf rarlinux-3.2.0.tar.gz&lt;br&gt;cd rar&lt;br&gt;make&lt;/p&gt;
&lt;p&gt;rar a all *.jpg&lt;br&gt;程序会自动将rar后缀名附着在all后面&lt;br&gt;unrar e all.rar&lt;/p&gt;
&lt;p&gt;总结&lt;br&gt;1、&lt;em&gt;.tar 用 tar –xvf 解压&lt;br&gt;2、&lt;/em&gt;.gz 用 gzip -d或者gunzip 解压&lt;br&gt;3、*.tar.gz和&lt;em&gt;.tgz 用 tar –xzf 解压&lt;br&gt;4、&lt;/em&gt;.bz2 用 bzip2 -d或者用bunzip2 解压&lt;br&gt;5、&lt;em&gt;.tar.bz2用tar –xjf 解压&lt;br&gt;6、&lt;/em&gt;.Z 用 uncompress 解压&lt;br&gt;7、&lt;em&gt;.tar.Z 用tar –xZf 解压&lt;br&gt;8、&lt;/em&gt;.rar 用 unrar e解压&lt;br&gt;9、*.zip 用 unzip 解压&lt;/p&gt;
&lt;h2 id=&quot;创建和删除软、硬链接&quot;&gt;&lt;a href=&quot;#创建和删除软、硬链接&quot; class=&quot;headerlink&quot; title=&quot;创建和删除软、硬链接&quot;&gt;&lt;/a&gt;创建和删除软、硬链接&lt;/h2&gt;&lt;p&gt;在Linux系统中，内核为每一个新创建的文件分配一个inode（索引节点），每个文件都有一个唯一的inode号，文件属性保存在索引节点中，在访问文件时，索引节点呗复制到内存里，从而实现文件的快速访问。&lt;br&gt;链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法，Linux中包含两种链接：硬链接（Hard Link）和软链接（Soft Link），软链接又称为符号链接（Symbolic Link）。符号链接相当于Windows下的快捷方式。&lt;/p&gt;
&lt;p&gt;###硬链接&lt;br&gt;就是一个指针，指向文件索引节点，系统并不为它重新分配inode，可以用ln命令来创建硬链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln [options] EXISTINGFILE NEWFILE
ln [options] EXISTINGFILE-LIST DIRECORY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-f 建立时，将同档案名删除&lt;br&gt;-i 删除前进行询问&lt;/p&gt;
&lt;p&gt;ln -s abc cde 建立abc 的软链接&lt;br&gt;ln abc cde 建立abc的硬链接&lt;/p&gt;
&lt;p&gt;ln file2 /home/root/file2hard&lt;/p&gt;
&lt;p&gt;如果使用了-f选项，如果newfile已经存在，则无论原来的newfile是什么文件，只用当前用户对它有写权限，newfile就成为EXISTINGFILE的硬链接文件&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可以在不同文件系统的文件间建立链接&lt;/li&gt;
&lt;li&gt;只有超级用户才可以为目录创建硬链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;软链接&quot;&gt;&lt;a href=&quot;#软链接&quot; class=&quot;headerlink&quot; title=&quot;软链接&quot;&gt;&lt;/a&gt;软链接&lt;/h3&gt;&lt;p&gt;软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。甚至可以跨越不同机器、不同网络对文件进行里链接。&lt;br&gt;建立软链接，只要在ln后面加上选项-s&lt;/p&gt;
&lt;p&gt;ln -s FILE1 FILE2&lt;/p&gt;
&lt;h3 id=&quot;删除链接&quot;&gt;&lt;a href=&quot;#删除链接&quot; class=&quot;headerlink&quot; title=&quot;删除链接&quot;&gt;&lt;/a&gt;删除链接&lt;/h3&gt;&lt;p&gt;rm -rf symbolic_name (不加/号！！！)&lt;/p&gt;
&lt;h2 id=&quot;帮助文档&quot;&gt;&lt;a href=&quot;#帮助文档&quot; class=&quot;headerlink&quot; title=&quot;帮助文档&quot;&gt;&lt;/a&gt;帮助文档&lt;/h2&gt;&lt;p&gt;Linux提供了极为详细的帮助工具及文档，一定要养成查帮助文档的习惯（没必要记忆所有东西），可以大大减少需要记忆的东西并提高效率&lt;br&gt;# help Command&lt;br&gt;适用于内部命令&lt;br&gt;举例：&lt;br&gt;# type cd&lt;br&gt;cd is a shell builtin&lt;br&gt;# help cd&lt;br&gt;# type ls&lt;br&gt;ls is aliased to &lt;code&gt;ls --color=auto&amp;#39;
\# help ls
-bash: help: no help topics match&lt;/code&gt;ls’.  Try &lt;code&gt;help help&amp;#39; or&lt;/code&gt;man -k ls’ or `info ls’.&lt;br&gt;# Command –help/-h&lt;br&gt;适用于外部命令&lt;br&gt;例如：&lt;br&gt;# ls –help&lt;br&gt;# man Command&lt;br&gt;manual 手册，是分章节；man # Command （#表示章节号）&lt;br&gt;1、所有用户可以使用的命令&lt;br&gt;2、系统内核调用，不是每个命令都有系统调用（如：man 2 read）&lt;br&gt;3、库调用&lt;br&gt;4、特殊文件，如：/dev/tty1&lt;br&gt;5、文件格式（命令配置文件的语法，如：man 5 passwd）&lt;br&gt;6、游戏相关&lt;br&gt;7、杂项&lt;br&gt;8、管理员命令，如：fdisk&lt;br&gt;man命令查询操作参考《vi,vim用法》中命令模式&lt;br&gt;看懂man命令语法&lt;br&gt;[]：可选内容&lt;br&gt;&amp;lt;&amp;gt;：必须给出内容&lt;br&gt;a|b|c：多选一&lt;br&gt;…：可以有多个&lt;br&gt;# info Command&lt;br&gt;有超链接稳文档，info是信息页，提供作者、版本，什么时候发布等更详细信息，man是手册告诉你怎么用&lt;br&gt;README&lt;br&gt;绝大多数程序都有相应的帮助文档，保存在/usr/share/doc文件夹中&lt;br&gt;如：&lt;br&gt;# ls /usr/share/doc/ntp-4.2.4p8/&lt;br&gt;ChangeLog  COPYRIGHT  NEWS&lt;br&gt;Google&lt;br&gt;遇到问题，二话不说Google，优先参考项目官方文档&lt;/p&gt;
&lt;p&gt;##识别进程的占用CPU/Memory，使用renice调整进程优先级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU占用最多的前10个进程：&lt;br&gt;ps auxw | head -1; ps auxw | sort -rn -k3 | head -10&lt;/li&gt;
&lt;li&gt;内存占用最多的前10个进程：&lt;br&gt;ps auxw | head -1; ps auxw | sort -rn -k4 | head&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ps命令下常用参数含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%MEM 进程的内存占用率&lt;/li&gt;
&lt;li&gt;VSZ 进程所使用的虚拟内存大小&lt;/li&gt;
&lt;li&gt;RSS 进程使用的驻留集大小或者是实际内存的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps -aux | sort -k4nr | head -n 5&lt;/p&gt;
&lt;p&gt;-k4nr是sort命令的参数,k4表示比较的是第四个key,也就是内存占用%的那一列,n是按照数字方式来比较,r表示反转排序结果,默认是从低到高,r之后就变成从高到低.如果你要用展示最初的5条,应该再加上head -n 5.而不是直接用head 5.&lt;/p&gt;
&lt;h2 id=&quot;NFS搭建&quot;&gt;&lt;a href=&quot;#NFS搭建&quot; class=&quot;headerlink&quot; title=&quot;NFS搭建&quot;&gt;&lt;/a&gt;NFS搭建&lt;/h2&gt;&lt;h3 id=&quot;building&quot;&gt;&lt;a href=&quot;#building&quot; class=&quot;headerlink&quot; title=&quot;building&quot;&gt;&lt;/a&gt;building&lt;/h3&gt;&lt;p&gt;一、安装 NFS 服务器所需的软件包：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;yum install -y nfs-utils&lt;br&gt;二、编辑exports文件，添加从机&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;vim /etc/exports&lt;br&gt;/data 192.168.0.100(rw,sync,fsid=0)  192.168.0.101(rw,sync,fsid=0)&lt;br&gt;192.168.0.100 和192.168.0.101两台机器可以挂载NFS服务器上的/data目录到自己的文件系统中&lt;/p&gt;
&lt;p&gt;rw表示可读写；sync表示同步写，fsid=0表示将/data找个目录包装成根目录&lt;/p&gt;
&lt;p&gt;三、启动nfs服务&lt;/p&gt;
&lt;p&gt;先为rpcbind和nfs做开机启动：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;systemctl enable rpcbind.service&lt;br&gt;systemctl enable nfs-server.service&lt;br&gt;然后分别启动rpcbind和nfs服务：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;systemctl start rpcbind.service&lt;br&gt;systemctl start nfs-server.service&lt;br&gt;确认NFS服务器启动成功：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;rpcinfo -p&lt;br&gt;检查 NFS 服务器是否挂载我们想共享的目录 /data：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;exportfs&lt;br&gt;#可以查看到已经ok&lt;br&gt;/data           192.168.0.100&lt;br&gt;/data           192.168.0.101&lt;br&gt;四、在从机上安装NFS 客户端&lt;/p&gt;
&lt;p&gt;首先是安裝nfs，同上，然后启动rpcbind服务&lt;/p&gt;
&lt;p&gt;先为rpcbind做开机启动：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;systemctl enable rpcbind.service&lt;br&gt;然后启动rpcbind服务：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;systemctl start rpcbind.service&lt;br&gt;注意：客户端不需要启动nfs服务&lt;/p&gt;
&lt;p&gt;自动挂载&lt;br&gt;在/etc/rc.d/rc.local中添加一行&lt;br&gt;mount -t nfs IP:directory  /localdirectory&lt;br&gt;然后执行&lt;br&gt;chmod +x /etc/rc.d/rc.local&lt;/p&gt;
&lt;p&gt;阿里云上的nfs搭建指南&lt;br&gt;&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/6709580.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://help.aliyun.com/knowledge_detail/6709580.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###mount&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount -t nfs xxx.xxx.xxx.xxx:/NFSPATH /LOCALPATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要设置客户端启动时就挂载nfs，可以设置/etc/fstab，添加&lt;br&gt;xxx.xxx.xxx.xxx:/NFSPATH    /LOCALPATH nfs auto, rw, vers=3, hard, intr, tcp, rsize=32768, wsize=32768    0 0&lt;/p&gt;
&lt;h2 id=&quot;进程优先级&quot;&gt;&lt;a href=&quot;#进程优先级&quot; class=&quot;headerlink&quot; title=&quot;进程优先级&quot;&gt;&lt;/a&gt;进程优先级&lt;/h2&gt;&lt;p&gt;1.新建一个进程并设置优先级&lt;br&gt;将当前目录下的documents目录打包，但不希望tar占用太多CPU：&lt;br&gt;nice-19 tar -zcf pack.tar.gz documents&lt;br&gt;方法非常简单，即在原命令前加上“nice -19”。很多人可能有疑问了，最低优先级不是19么？那是因为这个“-19”中的“-”仅表示参数前缀；所以，如果希望：&lt;br&gt;将当前目录下的documents目录打包，并且赋予tar进程最高的优先级：&lt;br&gt;nice –19 tar -zcf pack.tar.gz documents&lt;br&gt;2.修改已经存在的进程的优先级&lt;br&gt;将PID为1799的进程优先级设置为最低（19）：&lt;br&gt;renice 19 1799&lt;br&gt;将PID为1799的进程优先级设置为最高（-19）：&lt;br&gt;renice-19 1799&lt;br&gt;大家很可能发现了，renice命令与nice命令的优先级参数的形式是相反的。直接以优先级作为参数即可，不能加上“-”号，这点需要初学者注意。&lt;/p&gt;
&lt;p&gt;3.查看进程优先级&lt;br&gt;直接使用top命令即可查看进程优先级。&lt;br&gt;Linux对于进程优先级调整的作用还是非常明显的，在实际操作中也能明显的体会到。&lt;/p&gt;
&lt;p&gt;##重置root密码&lt;br&gt;rd.break重置密码&lt;/p&gt;
&lt;p&gt;1、启动的时候，在启动界面，相应启动项，内核名称上按“e”；&lt;/p&gt;
&lt;p&gt;2、进入后，找到linux16开头的地方，按“end”键到最后，输入rd.break，按ctrl+x进入。或者打到linux16 中ro的位置，执行ctrl +k 删除到行尾，再增加rd.break；&lt;/p&gt;
&lt;p&gt;3、进去后输入命令mount，发现根为/sysroot/，并且不能写，只有ro=readonly权限；&lt;/p&gt;
&lt;p&gt;4、mount -o remount,rw /sysroot/，重新挂载，之后mount，发现有了r,w权限；&lt;/p&gt;
&lt;p&gt;5、chroot /sysroot/ 改变根；&lt;/p&gt;
&lt;p&gt;（1）echo redhat|passwd –stdin root 修改root密码为redhat，或者输入passwd，交互修改；&lt;/p&gt;
&lt;p&gt;（2）还有就是先cp一份，然后修改/etc/shadow文件&lt;/p&gt;
&lt;p&gt;6、touch /.autorelabel 这句是为了selinux生效，重新扫描磁盘标签，autorelabel 是一个隐藏文件，前面有点，而且一定不能写错，不然reboot时会卡住。&lt;/p&gt;
&lt;p&gt;7、ctrl+d 退出&lt;/p&gt;
&lt;p&gt;8、然后reboot&lt;/p&gt;
&lt;p&gt;至此，密码修改完成&lt;/p&gt;
&lt;h2 id=&quot;创建、删除分区&quot;&gt;&lt;a href=&quot;#创建、删除分区&quot; class=&quot;headerlink&quot; title=&quot;创建、删除分区&quot;&gt;&lt;/a&gt;创建、删除分区&lt;/h2&gt;&lt;h3 id=&quot;ext4&quot;&gt;&lt;a href=&quot;#ext4&quot; class=&quot;headerlink&quot; title=&quot;ext4&quot;&gt;&lt;/a&gt;ext4&lt;/h3&gt;&lt;p&gt;选择要进行操作的磁盘：&lt;br&gt;fdisk /dev/sdb&lt;br&gt;输入m列出可执行的命令&lt;br&gt;输入p列出磁盘目前的分区情况&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Command (m for help): p 
Disk /dev/sdb: 3221 MB, 3221225472 bytes 255 heads, 63 sectors/track, 391 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes 
Device Boot Start End Blocks Id System 
/dev/sdb1 1 1 8001 8e Linux LVM /dev/sdb2 2 26 200812+ 83 Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入d然后选择分区，删除现有分区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1464097914658.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;输入p，查看分区情况，确认已删除后输入n简历新的磁盘分区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/1464097954320.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;##（自动）挂载、卸载和使用LUKS-encrypted 文件系统&lt;br&gt;cryptsetup luksFormat /dev/sdb&lt;br&gt;cryptsetup luksOpen /dev/sdb cryp&lt;br&gt;dd if=/dev/urandom of=/root/keyfile1 bs=1024 count=4&lt;br&gt;chmod 0400 /root/keyfile1&lt;br&gt;cryptsetup luksAddKey /dev/sdb /root/keyfile1&lt;br&gt;mkfs.xfs /dev/mapper/cryp&lt;br&gt;echo “/dev/mapper/cryp /mnt/1t xfs defaults 1 2” &amp;gt;&amp;gt; /etc/fstab&lt;br&gt;echo “cryp /dev/sdb /root/keyfile1 luks” &amp;gt;&amp;gt; /etc/crypttab&lt;br&gt;mount -a&lt;/p&gt;
&lt;h2 id=&quot;GPT-TO-MBR&quot;&gt;&lt;a href=&quot;#GPT-TO-MBR&quot; class=&quot;headerlink&quot; title=&quot;GPT TO MBR&quot;&gt;&lt;/a&gt;GPT TO MBR&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;@(我的第一个笔记本)[Linux, RHCSA]&lt;/p&gt;
&lt;h1 id=&quot;RHCSA-Note&quot;&gt;&lt;a href=&quot;#RHCSA-Note&quot; class=&quot;headerlink&quot; title=&quot;RHCSA Note&quot;&gt;&lt;/a&gt;RHCSA Note&lt;/h1&gt;&lt;h2 id=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
</feed>
